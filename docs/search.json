[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Surface Hydrology",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "introduction/introduction-exercises.html",
    "href": "introduction/introduction-exercises.html",
    "title": "2¬† Exercises",
    "section": "",
    "text": "let‚Äôs have fun plotting some data üòÄ"
  },
  {
    "objectID": "introduction/introduction-exercises.html#download-the-data",
    "href": "introduction/introduction-exercises.html#download-the-data",
    "title": "2¬† Exercises",
    "section": "2.1 download the data",
    "text": "2.1 download the data\n\nGo to the Faculty of Agriculture‚Äôs weather station.\nClick on ◊û◊©◊ô◊õ◊™ ◊†◊™◊ï◊†◊ô◊ù and download data for 1 September to 28 February, with a 24h interval. Call it data-sep2020-feb2021\nOpen the .csv file with Excel, see how it looks like\nIf you can‚Äôt download the data, just click here."
  },
  {
    "objectID": "introduction/introduction-exercises.html#import-packages",
    "href": "introduction/introduction-exercises.html#import-packages",
    "title": "2¬† Exercises",
    "section": "2.2 import packages",
    "text": "2.2 import packages\nWe need to import this data into python. First we import useful packages. Type (don‚Äôt copy and paste) the following lines in the code cell below.\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)"
  },
  {
    "objectID": "introduction/introduction-exercises.html#import-data-with-pandas",
    "href": "introduction/introduction-exercises.html#import-data-with-pandas",
    "title": "2¬† Exercises",
    "section": "2.3 import data with pandas",
    "text": "2.3 import data with pandas\nImport data from csv and put it in a pandas dataframe (a table). Make line 5 the header (column names)\n\n\nCode\ndf = pd.read_csv(\"data-sep2020-feb2021.csv\", header=[4])\ndf\n\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      ÔøΩC\n      ÔøΩC.1\n      km/h\n      mm\n      mm.1\n    \n  \n  \n    \n      0\n      01/09/20\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      1\n      02/09/20\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2\n      03/09/20\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      3\n      04/09/20\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      4\n      05/09/20\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      176\n      24/02/21\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      177\n      25/02/21\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      178\n      26/02/21\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      179\n      27/02/21\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      180\n      28/02/21\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 6 columns"
  },
  {
    "objectID": "introduction/introduction-exercises.html#rename-columns",
    "href": "introduction/introduction-exercises.html#rename-columns",
    "title": "2¬† Exercises",
    "section": "2.4 rename columns",
    "text": "2.4 rename columns\nrename the columns to:\ndate, tmax, tmin, wind, rain24h, rain_cumulative\n\n\nCode\ndf.columns = ['date', 'tmax', 'tmin', 'wind', 'rain24h', 'rain_cumulative']\ndf\n\n\n\n\n\n\n  \n    \n      \n      date\n      tmax\n      tmin\n      wind\n      rain24h\n      rain_cumulative\n    \n  \n  \n    \n      0\n      01/09/20\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      1\n      02/09/20\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2\n      03/09/20\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      3\n      04/09/20\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      4\n      05/09/20\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      176\n      24/02/21\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      177\n      25/02/21\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      178\n      26/02/21\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      179\n      27/02/21\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      180\n      28/02/21\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 6 columns"
  },
  {
    "objectID": "introduction/introduction-exercises.html#a-first-plot",
    "href": "introduction/introduction-exercises.html#a-first-plot",
    "title": "2¬† Exercises",
    "section": "2.5 a first plot!",
    "text": "2.5 a first plot!\nplot the minimum temperature:\n\n#collapse-hide\n\nplt.plot(df['tmin'])"
  },
  {
    "objectID": "introduction/introduction-exercises.html#how-to-deal-with-dates",
    "href": "introduction/introduction-exercises.html#how-to-deal-with-dates",
    "title": "2¬† Exercises",
    "section": "2.6 how to deal with dates",
    "text": "2.6 how to deal with dates\nWe want the dates to appear on the horizontal axis.\nInterpret ‚Äòdate‚Äô column as a pandas datetime, see how it looks different from before\nbefore: 01/09/20\nafter: 2020-09-01\n\n#collapse-hide\n\ndf['date'] = pd.to_datetime(df['date'], dayfirst=True)\ndf\n\n\n\n\n\n  \n    \n      \n      date\n      tmax\n      tmin\n      wind\n      rain24h\n      rain_cumulative\n    \n  \n  \n    \n      0\n      2020-09-01\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      1\n      2020-09-02\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2\n      2020-09-03\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      3\n      2020-09-04\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      4\n      2020-09-05\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      176\n      2021-02-24\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      177\n      2021-02-25\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      178\n      2021-02-26\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      179\n      2021-02-27\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      180\n      2021-02-28\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 6 columns\n\n\n\n\n2.6.1 date as dataframe index\nMake ‚Äòdate‚Äô the dataframe‚Äôs index (leftmost column, but not really a column!)\n\n#collapse-hide\n\ndf = df.set_index('date')\ndf\n\n\n\n\n\n  \n    \n      \n      tmax\n      tmin\n      wind\n      rain24h\n      rain_cumulative\n    \n    \n      date\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-09-01\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      2020-09-02\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2020-09-03\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      2020-09-04\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      2020-09-05\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-02-24\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      2021-02-25\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      2021-02-26\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      2021-02-27\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      2021-02-28\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 5 columns"
  },
  {
    "objectID": "introduction/introduction-exercises.html#plot-again-now-with-dates",
    "href": "introduction/introduction-exercises.html#plot-again-now-with-dates",
    "title": "2¬† Exercises",
    "section": "2.7 plot again, now with dates",
    "text": "2.7 plot again, now with dates\nPlot minimum temperature, now we have dates on the horizontal axis\n\n#collapse-hide\n\nplt.plot(df['tmin'])"
  },
  {
    "objectID": "introduction/introduction-exercises.html#were-getting-there-the-graph-could-look-better",
    "href": "introduction/introduction-exercises.html#were-getting-there-the-graph-could-look-better",
    "title": "2¬† Exercises",
    "section": "2.8 we‚Äôre getting there! the graph could look better",
    "text": "2.8 we‚Äôre getting there! the graph could look better\nLet‚Äôs make the graph look better: labels, title, slanted dates, etc\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n# two line plots\nax.plot(df['tmin'], color=\"red\", label=\"Temp (min)\")\nax.plot(df['tmax'], color=\"blue\", label=\"Temp (max)\")\n# axes labels and figure title\nax.set_xlabel('date')\nax.set_ylabel('temperature (¬∞C)')\nax.set_title('maximum and minimum temperatures')\n# some ticks adjustments\nax.set_yticks([10,15,20,25])  # we can choose where to put ticks\nax.grid(axis='y')         # makes horizontal lines\nplt.gcf().autofmt_xdate()  # makes slated dates\n# legend\nax.legend(loc='upper right')\n# save png figure\nplt.savefig(\"temp_max_min.png\")"
  },
  {
    "objectID": "introduction/introduction-exercises.html#make-the-following-figure",
    "href": "introduction/introduction-exercises.html#make-the-following-figure",
    "title": "2¬† Exercises",
    "section": "2.9 make the following figure",
    "text": "2.9 make the following figure\nUse the following function to plot bars for daily rainfall\nax.bar(x_array, y_array)\nCan you write yourself some lines of code that calculate the cumulative rainfall from the daily rainfall?\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n\n# line and bar plots\nax.bar(df.index, df['rain24h'], color=\"blue\", label=\"daily rainfall\")\n\n# there are many ways of calculating the cumulative rain\n\n# method 1, use a for loop:\n# rain = df['rain24h'].to_numpy()\n# cumulative = rain * 0\n# for i in range(len(rain)):\n#     cumulative[i] = np.sum(rain[:i])\n# df['cumulative1'] = cumulative\n\n# method 2, use list comprehension:\n# rain = df['rain24h'].to_numpy()\n# cumulative = [np.sum(rain[:i]) for i in range(len(rain))]\n# df['cumulative2'] = cumulative\n\n# method 3, use existing functions:\ndf['cumulative3'] = np.cumsum(df['rain24h'])\n\nax.plot(df['cumulative3'], color=\"red\", label=\"cumulative rainfall\")\n# compare our cumulative rainfall with the downloaded data\n# ax.plot(df['rain_cumulative'], 'x')\n# axes labels and figure title\nax.set_xlabel('date')\nax.set_ylabel('rainfall (mm)')\nax.set_title('daily and cumulative rainfall')\nax.set_xlim(['2020-11-01','2021-02-28'])\n# some ticks adjustments\nplt.gcf().autofmt_xdate()  # makes slated dates\n# legend\nax.legend(loc='upper left')\n# save png figure\nplt.savefig(\"cumulative_rainfall.png\")"
  },
  {
    "objectID": "introduction/introduction-exercises.html#make-another-figure",
    "href": "introduction/introduction-exercises.html#make-another-figure",
    "title": "2¬† Exercises",
    "section": "2.10 make another figure",
    "text": "2.10 make another figure\nIn order to choose just a part of the time series, you can use the following:\nstart_date = '2021-01-01'\nend_date = '2021-01-31'\njanuary = df[start_date:end_date]\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n# define date range\nstart_date = '2021-01-01'\nend_date = '2021-01-31'\njanuary = df[start_date:end_date]['tmax']\n# plots\nax.plot(january, color=\"red\", label=\"daily max\")\nax.plot(january*0 + january.mean(), color=\"purple\", linestyle=\"--\", label=\"average daily max\")\n# axes labels and figure title\nax.set_xlabel('date')\nax.set_ylabel('temperature (¬∞C)')\nax.set_title('average daily maximum temperature for January 2021')\n# some ticks adjustments\nplt.gcf().autofmt_xdate()  # makes slated dates\n# legend\nax.legend(loc='lower left')\n# save png figure\nplt.savefig(\"average_max_temp.png\")"
  },
  {
    "objectID": "introduction/introduction-exercises.html#one-last-figure-for-today",
    "href": "introduction/introduction-exercises.html#one-last-figure-for-today",
    "title": "2¬† Exercises",
    "section": "2.11 one last figure for today",
    "text": "2.11 one last figure for today\nUse the following code to create histograms with user-defined bins:\nb = np.arange(0, 56, 5)  # bins from 0 to 55, width = 5\nax.hist(df['wind'], bins=b, density=True)\nPlay with the bins, see what happens. What does density=True do?\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n# histogram\nb = np.arange(0, 56, 5)  # bins from 0 to 55, width = 5\nax.hist(df['wind'], bins=b, density=True)\n# axes labels and figure title\nax.set_xlabel('max wind speed (km/h)')\nax.set_ylabel('frequency')\nax.set_title('frequency of maximum wind speed')\n# save png figure\nplt.savefig(\"wind-histogram.png\")"
  },
  {
    "objectID": "appendix/date_formatting.html",
    "href": "appendix/date_formatting.html",
    "title": "9¬† Gain full control of date formatting",
    "section": "",
    "text": "import pandas as pd\n\nstart_date = '2018-01-01'\nend_date = '2018-04-30'\n\n# create date range with 1-hour intervals\ndates = pd.date_range(start_date, end_date, freq='1H')\n# create a random variable to plot\nvar = np.random.randint(low=-10, high=11, size=len(dates)).cumsum()\nvar = var - var.min()\n# create dataframe, make \"date\" the index\ndf = pd.DataFrame({'date': dates, 'variable': var})\ndf.set_index(df['date'], inplace=True)\ndf\n\n\n\n\n\n  \n    \n      \n      date\n      variable\n    \n    \n      date\n      \n      \n    \n  \n  \n    \n      2018-01-01 00:00:00\n      2018-01-01 00:00:00\n      856\n    \n    \n      2018-01-01 01:00:00\n      2018-01-01 01:00:00\n      863\n    \n    \n      2018-01-01 02:00:00\n      2018-01-01 02:00:00\n      867\n    \n    \n      2018-01-01 03:00:00\n      2018-01-01 03:00:00\n      874\n    \n    \n      2018-01-01 04:00:00\n      2018-01-01 04:00:00\n      864\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      2018-04-29 20:00:00\n      2018-04-29 20:00:00\n      20\n    \n    \n      2018-04-29 21:00:00\n      2018-04-29 21:00:00\n      20\n    \n    \n      2018-04-29 22:00:00\n      2018-04-29 22:00:00\n      27\n    \n    \n      2018-04-29 23:00:00\n      2018-04-29 23:00:00\n      23\n    \n    \n      2018-04-30 00:00:00\n      2018-04-30 00:00:00\n      32\n    \n  \n\n2857 rows √ó 2 columns\n\n\n\ndefine a useful function to plot the graphs below\n\ndef explanation(ax, text, letter):\n    ax.text(0.99, 0.97, text,\n            transform=ax.transAxes,\n            horizontalalignment='right', verticalalignment='top',\n            fontweight=\"bold\")\n    ax.text(0.01, 0.01, letter,\n            transform=ax.transAxes,\n            horizontalalignment='left', verticalalignment='bottom',\n            fontweight=\"bold\")\n    ax.set(ylabel=\"variable (units)\")\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nax.plot(df['variable'])\nplt.gcf().autofmt_xdate()  # makes slated dates\nexplanation(ax, \"slanted dates\", \"\")\nfig.savefig(\"dates1.png\")\n\n\n\n\n\nfig, ax = plt.subplots(4, 1, figsize=(10, 16),\n                       gridspec_kw={'hspace': 0.3})\n\n### plot a ###\nax[0].plot(df['variable'])\ndate_form = DateFormatter(\"%b\")\nax[0].xaxis.set_major_locator(mdates.MonthLocator(interval=2))\nax[0].xaxis.set_major_formatter(date_form)\n\n### plot b ###\nax[1].plot(df['variable'])\ndate_form = DateFormatter(\"%B\")\nax[1].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[1].xaxis.set_major_formatter(date_form)\n\n### plot c ###\nax[2].plot(df['variable'])\nax[2].xaxis.set_major_locator(mdates.MonthLocator())\n# 16 is a slight approximation for the center, since months differ in number of days.\nax[2].xaxis.set_minor_locator(mdates.MonthLocator(bymonthday=16))\nax[2].xaxis.set_major_formatter(ticker.NullFormatter())\nax[2].xaxis.set_minor_formatter(DateFormatter('%B'))\nfor tick in ax[2].xaxis.get_minor_ticks():\n    tick.tick1line.set_markersize(0)\n    tick.tick2line.set_markersize(0)\n    tick.label1.set_horizontalalignment('center')\n\n### plot d ###\nax[3].plot(df['variable'])\ndate_form = DateFormatter(\"%d %b\")\nax[3].xaxis.set_major_locator(mdates.DayLocator(interval=15))\nax[3].xaxis.set_major_formatter(date_form)\n\nexplanation(ax[0], \"month abbreviations, every 2 months\", \"a\")\nexplanation(ax[1], \"full month names\", \"b\")\nexplanation(ax[2], \"full month names centered between the 1st of the month\", \"c\")\nexplanation(ax[3], \"day + month abbr. --- every 15 days\", \"d\")\n\nfig.savefig(\"dates2.png\")\n\n\n\n\n\nfig, ax = plt.subplots(4, 1, figsize=(10, 16),\n                       gridspec_kw={'hspace': 0.3})\n\n### plot e ###\nax[0].plot(df['variable'])\ndate_form = DateFormatter(\"%d/%m\")\nax[0].xaxis.set_major_locator(mdates.DayLocator(bymonthday=[5, 20]))\nax[0].xaxis.set_major_formatter(date_form)\n\n### plot f ###\nax[1].plot(df['variable'])\nlocator = mdates.AutoDateLocator(minticks=11, maxticks=17)\nformatter = mdates.ConciseDateFormatter(locator)\nax[1].xaxis.set_major_locator(locator)\nax[1].xaxis.set_major_formatter(formatter)\n\n### plot g ###\nax[2].plot(df.loc['2018-01-01':'2018-03-01', 'variable'])\nlocator = mdates.AutoDateLocator(minticks=6, maxticks=14)\nformatter = mdates.ConciseDateFormatter(locator)\nax[2].xaxis.set_major_locator(locator)\nax[2].xaxis.set_major_formatter(formatter)\n\n### plot h ###\nax[3].plot(df.loc['2018-01-01':'2018-01-02', 'variable'])\nlocator = mdates.AutoDateLocator(minticks=6, maxticks=10)\nformatter = mdates.ConciseDateFormatter(locator)\nax[3].xaxis.set_major_locator(locator)\nax[3].xaxis.set_major_formatter(formatter)\n\nexplanation(ax[0], \"exactly on days 05 and 20 of each month\", \"e\")\nexplanation(ax[1], \"ConciseDateFormatter\", \"f\")\nexplanation(ax[2], \"ConciseDateFormatter\", \"g\")\nexplanation(ax[3], \"ConciseDateFormatter\", \"h\")\n\nfig.savefig(\"dates3.png\")\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4),\n                       gridspec_kw={'hspace': 0.3})\n\n# import constants for the days of the week\nfrom matplotlib.dates import MO, TU, WE, TH, FR, SA, SU\nax.plot(df['variable'])\n# tick on sundays every third week\nloc = mdates.WeekdayLocator(byweekday=SU, interval=3)\nax.xaxis.set_major_locator(loc)\ndate_form = DateFormatter(\"%a, %b %d\")\nax.xaxis.set_major_formatter(date_form)\nfig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')\nexplanation(ax, \"every 3 Sundays, rotate labels\", \"\")\n\n\n\n\n\n\n\nCode\nExplanation\n\n\n\n\n%Y\n4-digit year (e.g., 2022)\n\n\n%y\n2-digit year (e.g., 22)\n\n\n%m\n2-digit month (e.g., 12)\n\n\n%B\nFull month name (e.g., December)\n\n\n%b\nAbbreviated month name (e.g., Dec)\n\n\n%d\n2-digit day of the month (e.g., 09)\n\n\n%A\nFull weekday name (e.g., Tuesday)\n\n\n%a\nAbbreviated weekday name (e.g., Tue)\n\n\n%H\n24-hour clock hour (e.g., 23)\n\n\n%I\n12-hour clock hour (e.g., 11)\n\n\n%M\n2-digit minute (e.g., 59)\n\n\n%S\n2-digit second (e.g., 59)\n\n\n%p\n‚ÄúAM‚Äù or ‚ÄúPM‚Äù\n\n\n%Z\nTime zone name\n\n\n%z\nTime zone offset from UTC (e.g., -0500)"
  }
]