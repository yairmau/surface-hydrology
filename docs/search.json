[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Surface Hydrology",
    "section": "",
    "text": "Welcome to Surface Hydrology (71630) at the Hebrew University of Jerusalem. This is Yair Mau, your host for today. I am a senior lecturer at the Institute of Environmental Sciences, at the Faculty of Agriculture, Food and Environment, in Rehovot, Israel.\nThis website contains (almost) all the material you‚Äôll need for the course. If you find any mistakes, or have any comments, please email me.\n\n\n\n\nThis is an introductory course in Surface Hydrology, dealing with some of the major processes in the hydrologic cycle: precipitation, evaporation and transpiration, infiltration, runoff generation and streamflow. The different topics will be treated using mathematical models and practical programming exercises.\n\n\n\nThe course aims at giving the students a quantitative understanding of the main processes in the hydrologic cycle. We will characterize the hydrologic cycle and its fluxes through mass balance equations. The random nature of the various processes will be studied with statistics, time series analysis, return periods, extreme value distributions, etc. We will take a ‚Äúhands-on approach‚Äù, where students will actively engage with the material by analysing data and writing models using Python.\n\n\n\nOn successful completion of this module, students should be able to:\n\nIdentify the various components of hydrologic budget and their interdependency.\nDescribe the various processes in hydrology (precipitation, infiltration, evaporation, etc) in a mathematical language.\nWrite computer code to analyze the statistics of hydrologic fluxes, and construct models of hydrological systems.\n\n\n\n\n\nDingman, S. L. (2015). Physical hydrology (3rd edition). Waveland press.\nWard, A. D., & Trimble, S. W. (2003). Environmental hydrology. CRC Press.\nBrutsaert, W. (2005). Hydrology: An Introduction. Cambridge University Press.\n\n\n\n\nThere will be some small projects during the semester, all worth 50% of the grade. A final and larger project (50% of the grade) will be due at the end of the semester. All projects will be done in Python (on Jupyter Notebooks)."
  },
  {
    "objectID": "introduction/introduction-exercises.html",
    "href": "introduction/introduction-exercises.html",
    "title": "2¬† Exercises",
    "section": "",
    "text": "let‚Äôs have fun plotting some data üòÄ"
  },
  {
    "objectID": "introduction/introduction-exercises.html#download-the-data",
    "href": "introduction/introduction-exercises.html#download-the-data",
    "title": "2¬† Exercises",
    "section": "2.1 download the data",
    "text": "2.1 download the data\n\nGo to the Faculty of Agriculture‚Äôs weather station.\nClick on ◊û◊©◊ô◊õ◊™ ◊†◊™◊ï◊†◊ô◊ù and download data for 1 September to 28 February, with a 24h interval. Call it data-sep2020-feb2021\nOpen the .csv file with Excel, see how it looks like\nIf you can‚Äôt download the data, just click here."
  },
  {
    "objectID": "introduction/introduction-exercises.html#import-packages",
    "href": "introduction/introduction-exercises.html#import-packages",
    "title": "2¬† Exercises",
    "section": "2.2 import packages",
    "text": "2.2 import packages\nWe need to import this data into python. First we import useful packages. Type (don‚Äôt copy and paste) the following lines in the code cell below.\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)"
  },
  {
    "objectID": "introduction/introduction-exercises.html#import-data-with-pandas",
    "href": "introduction/introduction-exercises.html#import-data-with-pandas",
    "title": "2¬† Exercises",
    "section": "2.3 import data with pandas",
    "text": "2.3 import data with pandas\nImport data from csv and put it in a pandas dataframe (a table). Make line 5 the header (column names)\n\n\nCode\ndf = pd.read_csv(\"data-sep2020-feb2021.csv\", header=[4])\ndf\n\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      ÔøΩC\n      ÔøΩC.1\n      km/h\n      mm\n      mm.1\n    \n  \n  \n    \n      0\n      01/09/20\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      1\n      02/09/20\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2\n      03/09/20\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      3\n      04/09/20\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      4\n      05/09/20\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      176\n      24/02/21\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      177\n      25/02/21\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      178\n      26/02/21\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      179\n      27/02/21\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      180\n      28/02/21\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 6 columns"
  },
  {
    "objectID": "introduction/introduction-exercises.html#rename-columns",
    "href": "introduction/introduction-exercises.html#rename-columns",
    "title": "2¬† Exercises",
    "section": "2.4 rename columns",
    "text": "2.4 rename columns\nrename the columns to:\ndate, tmax, tmin, wind, rain24h, rain_cumulative\n\n\nCode\ndf.columns = ['date', 'tmax', 'tmin', 'wind', 'rain24h', 'rain_cumulative']\ndf\n\n\n\n\n\n\n  \n    \n      \n      date\n      tmax\n      tmin\n      wind\n      rain24h\n      rain_cumulative\n    \n  \n  \n    \n      0\n      01/09/20\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      1\n      02/09/20\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2\n      03/09/20\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      3\n      04/09/20\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      4\n      05/09/20\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      176\n      24/02/21\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      177\n      25/02/21\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      178\n      26/02/21\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      179\n      27/02/21\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      180\n      28/02/21\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 6 columns"
  },
  {
    "objectID": "introduction/introduction-exercises.html#a-first-plot",
    "href": "introduction/introduction-exercises.html#a-first-plot",
    "title": "2¬† Exercises",
    "section": "2.5 a first plot!",
    "text": "2.5 a first plot!\nplot the minimum temperature:\n\n#collapse-hide\n\nplt.plot(df['tmin'])"
  },
  {
    "objectID": "introduction/introduction-exercises.html#how-to-deal-with-dates",
    "href": "introduction/introduction-exercises.html#how-to-deal-with-dates",
    "title": "2¬† Exercises",
    "section": "2.6 how to deal with dates",
    "text": "2.6 how to deal with dates\nWe want the dates to appear on the horizontal axis.\nInterpret ‚Äòdate‚Äô column as a pandas datetime, see how it looks different from before\nbefore: 01/09/20\nafter: 2020-09-01\n\n#collapse-hide\n\ndf['date'] = pd.to_datetime(df['date'], dayfirst=True)\ndf\n\n\n\n\n\n  \n    \n      \n      date\n      tmax\n      tmin\n      wind\n      rain24h\n      rain_cumulative\n    \n  \n  \n    \n      0\n      2020-09-01\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      1\n      2020-09-02\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2\n      2020-09-03\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      3\n      2020-09-04\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      4\n      2020-09-05\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      176\n      2021-02-24\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      177\n      2021-02-25\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      178\n      2021-02-26\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      179\n      2021-02-27\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      180\n      2021-02-28\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 6 columns\n\n\n\n\n2.6.1 date as dataframe index\nMake ‚Äòdate‚Äô the dataframe‚Äôs index (leftmost column, but not really a column!)\n\n#collapse-hide\n\ndf = df.set_index('date')\ndf\n\n\n\n\n\n  \n    \n      \n      tmax\n      tmin\n      wind\n      rain24h\n      rain_cumulative\n    \n    \n      date\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-09-01\n      32.8\n      25.3\n      29.7\n      0.0\n      0.0\n    \n    \n      2020-09-02\n      33.0\n      24.0\n      28.8\n      0.0\n      0.0\n    \n    \n      2020-09-03\n      34.2\n      23.8\n      31.6\n      0.0\n      0.0\n    \n    \n      2020-09-04\n      36.3\n      27.3\n      24.2\n      0.0\n      0.0\n    \n    \n      2020-09-05\n      34.2\n      26.3\n      22.4\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-02-24\n      20.6\n      9.9\n      28.8\n      0.0\n      481.7\n    \n    \n      2021-02-25\n      19.4\n      9.3\n      23.3\n      0.0\n      481.7\n    \n    \n      2021-02-26\n      21.3\n      8.0\n      24.2\n      0.1\n      481.8\n    \n    \n      2021-02-27\n      23.4\n      9.2\n      30.6\n      0.0\n      481.8\n    \n    \n      2021-02-28\n      19.7\n      9.2\n      22.4\n      0.0\n      481.8\n    \n  \n\n181 rows √ó 5 columns"
  },
  {
    "objectID": "introduction/introduction-exercises.html#plot-again-now-with-dates",
    "href": "introduction/introduction-exercises.html#plot-again-now-with-dates",
    "title": "2¬† Exercises",
    "section": "2.7 plot again, now with dates",
    "text": "2.7 plot again, now with dates\nPlot minimum temperature, now we have dates on the horizontal axis\n\n#collapse-hide\n\nplt.plot(df['tmin'])"
  },
  {
    "objectID": "introduction/introduction-exercises.html#were-getting-there-the-graph-could-look-better",
    "href": "introduction/introduction-exercises.html#were-getting-there-the-graph-could-look-better",
    "title": "2¬† Exercises",
    "section": "2.8 we‚Äôre getting there! the graph could look better",
    "text": "2.8 we‚Äôre getting there! the graph could look better\nLet‚Äôs make the graph look better: labels, title, slanted dates, etc\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n# two line plots\nax.plot(df['tmin'], color=\"red\", label=\"Temp (min)\")\nax.plot(df['tmax'], color=\"blue\", label=\"Temp (max)\")\n# axes labels and figure title\nax.set_xlabel('date')\nax.set_ylabel('temperature (¬∞C)')\nax.set_title('maximum and minimum temperatures')\n# some ticks adjustments\nax.set_yticks([10,15,20,25])  # we can choose where to put ticks\nax.grid(axis='y')         # makes horizontal lines\nplt.gcf().autofmt_xdate()  # makes slated dates\n# legend\nax.legend(loc='upper right')\n# save png figure\nplt.savefig(\"temp_max_min.png\")"
  },
  {
    "objectID": "introduction/introduction-exercises.html#make-the-following-figure",
    "href": "introduction/introduction-exercises.html#make-the-following-figure",
    "title": "2¬† Exercises",
    "section": "2.9 make the following figure",
    "text": "2.9 make the following figure\nUse the following function to plot bars for daily rainfall\nax.bar(x_array, y_array)\nCan you write yourself some lines of code that calculate the cumulative rainfall from the daily rainfall?\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n\n# line and bar plots\nax.bar(df.index, df['rain24h'], color=\"blue\", label=\"daily rainfall\")\n\n# there are many ways of calculating the cumulative rain\n\n# method 1, use a for loop:\n# rain = df['rain24h'].to_numpy()\n# cumulative = rain * 0\n# for i in range(len(rain)):\n#     cumulative[i] = np.sum(rain[:i])\n# df['cumulative1'] = cumulative\n\n# method 2, use list comprehension:\n# rain = df['rain24h'].to_numpy()\n# cumulative = [np.sum(rain[:i]) for i in range(len(rain))]\n# df['cumulative2'] = cumulative\n\n# method 3, use existing functions:\ndf['cumulative3'] = np.cumsum(df['rain24h'])\n\nax.plot(df['cumulative3'], color=\"red\", label=\"cumulative rainfall\")\n# compare our cumulative rainfall with the downloaded data\n# ax.plot(df['rain_cumulative'], 'x')\n# axes labels and figure title\nax.set_xlabel('date')\nax.set_ylabel('rainfall (mm)')\nax.set_title('daily and cumulative rainfall')\nax.set_xlim(['2020-11-01','2021-02-28'])\n# some ticks adjustments\nplt.gcf().autofmt_xdate()  # makes slated dates\n# legend\nax.legend(loc='upper left')\n# save png figure\nplt.savefig(\"cumulative_rainfall.png\")"
  },
  {
    "objectID": "introduction/introduction-exercises.html#make-another-figure",
    "href": "introduction/introduction-exercises.html#make-another-figure",
    "title": "2¬† Exercises",
    "section": "2.10 make another figure",
    "text": "2.10 make another figure\nIn order to choose just a part of the time series, you can use the following:\nstart_date = '2021-01-01'\nend_date = '2021-01-31'\njanuary = df[start_date:end_date]\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n# define date range\nstart_date = '2021-01-01'\nend_date = '2021-01-31'\njanuary = df[start_date:end_date]['tmax']\n# plots\nax.plot(january, color=\"red\", label=\"daily max\")\nax.plot(january*0 + january.mean(), color=\"purple\", linestyle=\"--\", label=\"average daily max\")\n# axes labels and figure title\nax.set_xlabel('date')\nax.set_ylabel('temperature (¬∞C)')\nax.set_title('average daily maximum temperature for January 2021')\n# some ticks adjustments\nplt.gcf().autofmt_xdate()  # makes slated dates\n# legend\nax.legend(loc='lower left')\n# save png figure\nplt.savefig(\"average_max_temp.png\")"
  },
  {
    "objectID": "introduction/introduction-exercises.html#one-last-figure-for-today",
    "href": "introduction/introduction-exercises.html#one-last-figure-for-today",
    "title": "2¬† Exercises",
    "section": "2.11 one last figure for today",
    "text": "2.11 one last figure for today\nUse the following code to create histograms with user-defined bins:\nb = np.arange(0, 56, 5)  # bins from 0 to 55, width = 5\nax.hist(df['wind'], bins=b, density=True)\nPlay with the bins, see what happens. What does density=True do?\n\n#collapse-hide\n\n# creates figure (the canvas) and the axis (rectangle where the plot sits)\nfig, ax = plt.subplots(1, figsize=(10,7))\n# histogram\nb = np.arange(0, 56, 5)  # bins from 0 to 55, width = 5\nax.hist(df['wind'], bins=b, density=True)\n# axes labels and figure title\nax.set_xlabel('max wind speed (km/h)')\nax.set_ylabel('frequency')\nax.set_title('frequency of maximum wind speed')\n# save png figure\nplt.savefig(\"wind-histogram.png\")"
  },
  {
    "objectID": "appendix/date_formatting.html",
    "href": "appendix/date_formatting.html",
    "title": "9¬† Gain full control of date formatting",
    "section": "",
    "text": "import pandas as pd\n\nstart_date = '2018-01-01'\nend_date = '2018-04-30'\n\n# create date range with 1-hour intervals\ndates = pd.date_range(start_date, end_date, freq='1H')\n# create a random variable to plot\nvar = np.random.randint(low=-10, high=11, size=len(dates)).cumsum()\nvar = var - var.min()\n# create dataframe, make \"date\" the index\ndf = pd.DataFrame({'date': dates, 'variable': var})\ndf.set_index(df['date'], inplace=True)\ndf\n\n\n\n\n\n  \n    \n      \n      date\n      variable\n    \n    \n      date\n      \n      \n    \n  \n  \n    \n      2018-01-01 00:00:00\n      2018-01-01 00:00:00\n      856\n    \n    \n      2018-01-01 01:00:00\n      2018-01-01 01:00:00\n      863\n    \n    \n      2018-01-01 02:00:00\n      2018-01-01 02:00:00\n      867\n    \n    \n      2018-01-01 03:00:00\n      2018-01-01 03:00:00\n      874\n    \n    \n      2018-01-01 04:00:00\n      2018-01-01 04:00:00\n      864\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      2018-04-29 20:00:00\n      2018-04-29 20:00:00\n      20\n    \n    \n      2018-04-29 21:00:00\n      2018-04-29 21:00:00\n      20\n    \n    \n      2018-04-29 22:00:00\n      2018-04-29 22:00:00\n      27\n    \n    \n      2018-04-29 23:00:00\n      2018-04-29 23:00:00\n      23\n    \n    \n      2018-04-30 00:00:00\n      2018-04-30 00:00:00\n      32\n    \n  \n\n2857 rows √ó 2 columns\n\n\n\ndefine a useful function to plot the graphs below\n\ndef explanation(ax, text, letter):\n    ax.text(0.99, 0.97, text,\n            transform=ax.transAxes,\n            horizontalalignment='right', verticalalignment='top',\n            fontweight=\"bold\")\n    ax.text(0.01, 0.01, letter,\n            transform=ax.transAxes,\n            horizontalalignment='left', verticalalignment='bottom',\n            fontweight=\"bold\")\n    ax.set(ylabel=\"variable (units)\")\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nax.plot(df['variable'])\nplt.gcf().autofmt_xdate()  # makes slated dates\nexplanation(ax, \"slanted dates\", \"\")\nfig.savefig(\"dates1.png\")\n\n\n\n\n\nfig, ax = plt.subplots(4, 1, figsize=(10, 16),\n                       gridspec_kw={'hspace': 0.3})\n\n### plot a ###\nax[0].plot(df['variable'])\ndate_form = DateFormatter(\"%b\")\nax[0].xaxis.set_major_locator(mdates.MonthLocator(interval=2))\nax[0].xaxis.set_major_formatter(date_form)\n\n### plot b ###\nax[1].plot(df['variable'])\ndate_form = DateFormatter(\"%B\")\nax[1].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[1].xaxis.set_major_formatter(date_form)\n\n### plot c ###\nax[2].plot(df['variable'])\nax[2].xaxis.set_major_locator(mdates.MonthLocator())\n# 16 is a slight approximation for the center, since months differ in number of days.\nax[2].xaxis.set_minor_locator(mdates.MonthLocator(bymonthday=16))\nax[2].xaxis.set_major_formatter(ticker.NullFormatter())\nax[2].xaxis.set_minor_formatter(DateFormatter('%B'))\nfor tick in ax[2].xaxis.get_minor_ticks():\n    tick.tick1line.set_markersize(0)\n    tick.tick2line.set_markersize(0)\n    tick.label1.set_horizontalalignment('center')\n\n### plot d ###\nax[3].plot(df['variable'])\ndate_form = DateFormatter(\"%d %b\")\nax[3].xaxis.set_major_locator(mdates.DayLocator(interval=15))\nax[3].xaxis.set_major_formatter(date_form)\n\nexplanation(ax[0], \"month abbreviations, every 2 months\", \"a\")\nexplanation(ax[1], \"full month names\", \"b\")\nexplanation(ax[2], \"full month names centered between the 1st of the month\", \"c\")\nexplanation(ax[3], \"day + month abbr. --- every 15 days\", \"d\")\n\nfig.savefig(\"dates2.png\")\n\n\n\n\n\nfig, ax = plt.subplots(4, 1, figsize=(10, 16),\n                       gridspec_kw={'hspace': 0.3})\n\n### plot e ###\nax[0].plot(df['variable'])\ndate_form = DateFormatter(\"%d/%m\")\nax[0].xaxis.set_major_locator(mdates.DayLocator(bymonthday=[5, 20]))\nax[0].xaxis.set_major_formatter(date_form)\n\n### plot f ###\nax[1].plot(df['variable'])\nlocator = mdates.AutoDateLocator(minticks=11, maxticks=17)\nformatter = mdates.ConciseDateFormatter(locator)\nax[1].xaxis.set_major_locator(locator)\nax[1].xaxis.set_major_formatter(formatter)\n\n### plot g ###\nax[2].plot(df.loc['2018-01-01':'2018-03-01', 'variable'])\nlocator = mdates.AutoDateLocator(minticks=6, maxticks=14)\nformatter = mdates.ConciseDateFormatter(locator)\nax[2].xaxis.set_major_locator(locator)\nax[2].xaxis.set_major_formatter(formatter)\n\n### plot h ###\nax[3].plot(df.loc['2018-01-01':'2018-01-02', 'variable'])\nlocator = mdates.AutoDateLocator(minticks=6, maxticks=10)\nformatter = mdates.ConciseDateFormatter(locator)\nax[3].xaxis.set_major_locator(locator)\nax[3].xaxis.set_major_formatter(formatter)\n\nexplanation(ax[0], \"exactly on days 05 and 20 of each month\", \"e\")\nexplanation(ax[1], \"ConciseDateFormatter\", \"f\")\nexplanation(ax[2], \"ConciseDateFormatter\", \"g\")\nexplanation(ax[3], \"ConciseDateFormatter\", \"h\")\n\nfig.savefig(\"dates3.png\")\n\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4),\n                       gridspec_kw={'hspace': 0.3})\n\n# import constants for the days of the week\nfrom matplotlib.dates import MO, TU, WE, TH, FR, SA, SU\nax.plot(df['variable'])\n# tick on sundays every third week\nloc = mdates.WeekdayLocator(byweekday=SU, interval=3)\nax.xaxis.set_major_locator(loc)\ndate_form = DateFormatter(\"%a, %b %d\")\nax.xaxis.set_major_formatter(date_form)\nfig.autofmt_xdate(bottom=0.2, rotation=30, ha='right')\nexplanation(ax, \"every 3 Sundays, rotate labels\", \"\")\n\n\n\n\n\n\n\nCode\nExplanation\n\n\n\n\n%Y\n4-digit year (e.g., 2022)\n\n\n%y\n2-digit year (e.g., 22)\n\n\n%m\n2-digit month (e.g., 12)\n\n\n%B\nFull month name (e.g., December)\n\n\n%b\nAbbreviated month name (e.g., Dec)\n\n\n%d\n2-digit day of the month (e.g., 09)\n\n\n%A\nFull weekday name (e.g., Tuesday)\n\n\n%a\nAbbreviated weekday name (e.g., Tue)\n\n\n%H\n24-hour clock hour (e.g., 23)\n\n\n%I\n12-hour clock hour (e.g., 11)\n\n\n%M\n2-digit minute (e.g., 59)\n\n\n%S\n2-digit second (e.g., 59)\n\n\n%p\n‚ÄúAM‚Äù or ‚ÄúPM‚Äù\n\n\n%Z\nTime zone name\n\n\n%z\nTime zone offset from UTC (e.g., -0500)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Brutsaert, Wilfried. 2005. Hydrology: An Introduction.\nCambridge University Press.\n\n\ndreamstime. 2022. ‚ÄúWorld Map of AFRICA.‚Äù\nDreamstime. https://www.dreamstime.com/world-map-africa-egypt-libya-ethiopia-arabia-mauritania-nigeria-somalia-namibia-tanzania-madagascar-geographic-xxl-chart-image154799901.\n\n\nFiona Bruce. 2015. ‚ÄúA Family Holiday in Lake Malawi: Zen and the\nArt of Paddleboarding.‚Äù The Telegraph. https://twitter.com/hallaboutafrica/status/1203419359303159809?s=20&t=SkH17UkWrNcXzIqRF0ic_A.\n\n\nKnuth, Donald E. 1984. ‚ÄúLiterate Programming.‚Äù Comput.\nJ. 27 (2): 97‚Äì111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nleddris. 2010. ‚ÄúRainfall Seasonality.‚Äù Land and\nEcosystem Degradation and Desertification Response Information\nSystem. http://leddris.aegean.gr/ses-parameters/293-rainfall-seasonality.html#:~:text=Rainfall%20seasonality%20index%20is%20a,in%20relation%20to%20water%20availability.\n\n\nMargulis, Steve. 2019. ‚ÄúIntroduction to Hydrology. eBook.‚Äù\nhttps://margulis-group.github.io/textbook/.\n\n\nRaymond, Lyle S. Jr. 1988. ‚ÄúWhat Is Groundwater?‚Äù\nCornell eCommons. https://ecommons.cornell.edu/handle/1813/3408.\n\n\nSuma Groulx. 2015. ‚ÄúWater Infiltration.‚Äù Suma\nGroulx. http://sumagroulx.com/water-infiltration/.\n\n\nValent√≠ Rodellas. 1988. ‚ÄúEvaluating Submarine Groundwater\nDischarge to the Mediterranean Sea by Using Radium Isotopes.‚Äù\nResearch Gate. https://www.researchgate.net/figure/Principal-pathways-for-submarine-groundwater-discharge-to-the-coastal-ocean-including_fig1_274590439.\n\n\nWalsh, RPD, and DM Lawler. 1981. ‚ÄúRainfall Seasonality:\nDescription, Spatial Patterns and Change Through Time.‚Äù\nWeather 36 (7): 201‚Äì8. https://doi.org/10.1002/j.1477-8696.1981.tb05400.x.\n\n\nWater Science School. 2018. ‚ÄúWhere Is Earth‚Äôs Water?‚Äù\nU.S. Geological Survey. https://www.usgs.gov/special-topics/water-science-school/science/where-earths-water.\n\n\n‚Äî‚Äî‚Äî. 2019a. ‚ÄúConceptual Groundwater-Flow Diagram.‚Äù U.S.\nGeological Survey. https://www.usgs.gov/media/images/conceptual-groundwater-flow-diagram.\n\n\n‚Äî‚Äî‚Äî. 2019b. ‚ÄúGroundwater Is the Area Underground Where Openings\nAre Full of Water.‚Äù U.S. Geological Survey. https://www.usgs.gov/media/images/groundwater-area-underground-where-openings-are-full-water.\n\n\n‚Äî‚Äî‚Äî. 2019c. ‚ÄúHow Much Water Is There on Earth?‚Äù U.S.\nGeological Survey. https://www.usgs.gov/special-topics/water-science-school/science/how-much-water-there-earth.\n\n\n‚Äî‚Äî‚Äî. 2019d. ‚ÄúIce, Snow, and Glaciers and the Water Cycle.‚Äù\nU.S. Geological Survey. https://www.usgs.gov/special-topics/water-science-school/science/ice-snow-and-glaciers-and-water-cycle.\n\n\n‚Äî‚Äî‚Äî. 2019e. ‚ÄúPrecipitation and the Water Cycle.‚Äù U.S.\nGeological Survey. https://www.usgs.gov/special-topics/water-science-school/science/precipitation-and-water-cycle.\n\n\n‚Äî‚Äî‚Äî. 2019f. ‚ÄúRain and Precipitation.‚Äù U.S. Geological\nSurvey. https://www.usgs.gov/special-topics/water-science-school/science/rain-and-precipitation.\n\n\n‚Äî‚Äî‚Äî. 2019g. ‚ÄúThe Natural Water Cycle.‚Äù U.S. Geological\nSurvey. https://www.usgs.gov/media/images/natural-water-cycle-jpg.\n\n\n‚Äî‚Äî‚Äî. 2022. ‚ÄúThe Water Cycle.‚Äù U.S. Geological\nSurvey. https://www.usgs.gov/media/images/water-cycle-png.\n\n\n◊ó◊ì◊©◊ï◊™ ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î. 2020. ‚Äú◊ê◊ï◊ë◊ö ◊ï◊û◊¢◊®◊õ◊™ ◊í◊©◊û◊ô◊ù ◊õ◊ë◊ì◊î ◊†◊ï◊°◊§◊™.‚Äù\nMelabes. https://www.melabes.co.il/news/51773."
  },
  {
    "objectID": "introduction/introduction-lecture.html",
    "href": "introduction/introduction-lecture.html",
    "title": "1¬† Water Cycle: Fluxes and Storage",
    "section": "",
    "text": "Source: Water Science School (2019c)\n\n\n\n\n\nSource: Water Science School (2018)"
  },
  {
    "objectID": "introduction/introduction-lecture.html#the-natural-water-cycle-2019",
    "href": "introduction/introduction-lecture.html#the-natural-water-cycle-2019",
    "title": "1¬† Water Cycle: Fluxes and Storage",
    "section": "1.2 The natural water cycle (2019)",
    "text": "1.2 The natural water cycle (2019)\n\n\n\nSource: Water Science School (2019g)"
  },
  {
    "objectID": "introduction/introduction-lecture.html#the-new-water-cycle-2022",
    "href": "introduction/introduction-lecture.html#the-new-water-cycle-2022",
    "title": "1¬† Water Cycle: Fluxes and Storage",
    "section": "1.3 The new water cycle (2022)",
    "text": "1.3 The new water cycle (2022)\n\n\n\nSource: Water Science School (2022)\n\n\nInteractive chart: Pools and fluxes in the water cycle"
  },
  {
    "objectID": "introduction/introduction-lecture.html#global-water-distribution",
    "href": "introduction/introduction-lecture.html#global-water-distribution",
    "title": "1¬† Water Cycle: Fluxes and Storage",
    "section": "1.4 Global water distribution",
    "text": "1.4 Global water distribution\n\nSource: Water Science School (2018). (Percents are rounded, so will not add to 100)\n\n\n\n\n\n\n\n\nWater source\nVolume (km\\(^3\\))\n% of freshwater\n% of total water\n\n\n\n\nOceans, Seas, & Bays\n1,338,000,000\n‚Äì\n96.54\n\n\nIce caps, Glaciers, & Permanent Snow\n24,064,000\n68.7\n1.74\n\n\nGroundwater\n23,400,000\n‚Äì\n1.69\n\n\n\\(\\quad\\)Fresh\n10,530,000\n30.1\n0.76\n\n\n\\(\\quad\\)Saline\n12,870,000\n‚Äì\n0.93\n\n\nSoil Moisture\n16,500\n0.05\n0.001\n\n\nGround Ice & Permafrost\n300,000\n0.86\n0.022\n\n\nLakes\n176,400\n‚Äì\n0.013\n\n\n\\(\\quad\\)Fresh\n91,000\n0.26\n0.007\n\n\n\\(\\quad\\)Saline\n85,400\n‚Äì\n0.006\n\n\nAtmosphere\n12,900\n0.04\n0.001\n\n\nSwamp Water\n11,470\n0.03\n0.0008\n\n\nRivers\n2,120\n0.006\n0.0002\n\n\nBiological Water\n1,120\n0.003\n0.0001"
  },
  {
    "objectID": "introduction/introduction-lecture.html#energy-drives-the-hydrologic-cycle",
    "href": "introduction/introduction-lecture.html#energy-drives-the-hydrologic-cycle",
    "title": "1¬† Water Cycle: Fluxes and Storage",
    "section": "1.5 Energy drives the hydrologic cycle",
    "text": "1.5 Energy drives the hydrologic cycle\nFrom Margulis (2019)\n\nA key aspect of the hydrologic cycle is the fact that it is driven by energy inputs (primarily from the sun). At the global scale, the system is essentially closed with respect to water; negligible water is entering or leaving the system. In other words, there is no external forcing in terms of a water flux. Systems with no external forcing will generally eventually come to an equilibrium state. So what makes the hydrologic cycle so dynamic? The solar radiative energy input, which is external to the system, drives the hydrologic cycle. Averaged over the globe, 342 W m\\(^{-2}\\) of solar radiative energy is being continuously input to the system at the top of the atmosphere. This energy input must be dissipated, and this is done, to a large extent, via the hydrologic cycle. Due to this fact, the study of hydrology is not isolated to the study of water storage and movement, but also must often include study of energy storage and movements."
  },
  {
    "objectID": "introduction/introduction-lecture.html#components-of-the-water-cycle",
    "href": "introduction/introduction-lecture.html#components-of-the-water-cycle",
    "title": "1¬† Water Cycle: Fluxes and Storage",
    "section": "1.6 Components of the water cycle",
    "text": "1.6 Components of the water cycle\n\n1.6.1 Water storage in oceans\n\n\n1.6.2 Evaporation / Sublimation\nEvaporation \\(\\longrightarrow\\) cooling\n\n\n\n  \n\n\n1.6.3 Evapotranspiration\n\n\n\n1.6.4 Water storage in the atmosphere\nCumulonimbus cloud over Africa \nPicture of cumulonimbus taken from the International Space Station, over western Africa near the Senegal-Mali border.\nIf all of the water in the atmosphere rained down at once, it would only cover the globe to a depth of 2.5 centimeters. \\[\n\\begin{align}\n\\text{amount of water in the atmosphere} & \\qquad V = 12\\, 900\\, \\text{km}^3 \\\\\n\\text{surface of Earth} & \\qquad S = 4 \\pi R^2;\\quad R=6371\\,\\text{km}\\\\\n& \\qquad V = S \\times h \\\\\n\\text{height} & \\qquad h = \\frac{V}{S} \\simeq 2.5\\,\\text{cm}\n\\end{align}\n\\]\nTry to calculate this yourself, and click on the button below to check how to do it.\n\n\nShow/hide the code\n# amount of water in the atmosphere\nV = 12900 # km^3\n# Earth's radius\nR = 6371 # km\n# surface of Earth = 4 pi RÀÜ2\nS = 4 * 3.141592 * R**2\n# Volume: V = S * h, therefore\n# height\nh = V / S # in km\nh_cm = h * 1e5 # in cm\nprint(f\"The height would be ~ {h_cm:.1f} cm\")\n\n\nThe height would be ~ 2.5 cm\n\n\n\n\n1.6.5 Condensation\n\n\n1.6.6 Precipitation\n\n\n\nSource: Water Science School (2019f)\n\n\n\nSource: Water Science School (2019e)\n\n\n\n\n\n\n\n\n\n\nIntensity (cm/h)\nMedian diameter (mm)\nVelocity of fall (m/s)\nDrops s\\(^{-1}\\) m\\(^{-2}\\)\n\n\n\n\nFog\n0.013\n0.01\n0.003\n67,425,000\n\n\nMist\n0.005\n0.1\n0.21\n27,000\n\n\nDrizzle\n0.025\n0.96\n4.1\n151\n\n\nLight rain\n0.10\n1.24\n4.8\n280\n\n\nModerate rain\n0.38\n1.60\n5.7\n495\n\n\nHeavy rain\n1.52\n2.05\n6.7\n495\n\n\nExcessive rain\n4.06\n2.40\n7.3\n818\n\n\nCloudburst\n10.2\n2.85\n7.9\n1,220\n\n\n\n\n\n1.6.7 Water storage in ice and snow\n\n\n\nSource: Water Science School (2019d)\n\n\n\n\n\nSource: Water Science School (2019d)\n\n\n\n\n1.6.8 Snowmelt runoff to streams\n\n\n1.6.9 Surface runoff\n\n\n\nSource: ◊ó◊ì◊©◊ï◊™ ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î (2020)\n\n\n\n\n\n1.6.10 Streamflow\nThe Mississippi river basin is very large \nThe Amazon river basin is Huge \n\n\n\nSource: Yair Mau\n\n\n\n\n1.6.11 Lakes and rivers\n\n\n\nSource: dreamstime (2022)\n\n\nLake Malawi \n\n\n\nSource: Fiona Bruce (2015)\n\n\n\n\n1.6.12 Infiltration\n\n\n\nSource: Suma Groulx (2015)\n\n\n\n\n1.6.13 Groundwater storage\n\n\n\nSource: Water Science School (2019b)\n\n\n\n\n\nSource: (modernfarmer?)\n\n\n\n\n\nSource: (ogallala1?)\n\n\nCenter Pivot irrigation in Nebraska taps the Ogallala Aquifer. \n\n\n1.6.14 Groundwater flow and discharge\n\n\n\nSource: Water Science School (2019a)\n\n\n\n\n\nSource: Raymond, Lyle S. Jr. (1988)\n\n\n\n\n\nSource: Valent√≠ Rodellas (1988)\n\n\n\n\n1.6.15 Spring\nEin Gedi \nThousand Springs, Idaho \n\n\n\n\nAmazon Waters. 2022. ‚ÄúAmazon Waters.‚Äù Amazon Waters. https://amazonwaters.org/basins.\n\n\ndreamstime. 2022. ‚ÄúWorld Map of AFRICA.‚Äù Dreamstime. https://www.dreamstime.com/world-map-africa-egypt-libya-ethiopia-arabia-mauritania-nigeria-somalia-namibia-tanzania-madagascar-geographic-xxl-chart-image154799901.\n\n\nFiona Bruce. 2015. ‚ÄúA Family Holiday in Lake Malawi: Zen and the Art of Paddleboarding.‚Äù The Telegraph. https://twitter.com/hallaboutafrica/status/1203419359303159809?s=20&t=SkH17UkWrNcXzIqRF0ic_A.\n\n\nJames Hall. 2019. ‚ÄúLake Malawi.‚Äù Twitter. https://twitter.com/hallaboutafrica/status/1203419359303159809?s=20&t=SkH17UkWrNcXzIqRF0ic_A.\n\n\nMargulis, Steve. 2019. ‚ÄúIntroduction to Hydrology. eBook.‚Äù https://margulis-group.github.io/textbook/.\n\n\nMarty Friedlander. 2015. ‚ÄúNatural Springs of Israel: Seven Cool Watering Holes to Visit This Summer.‚Äù Haaretz. https://www.haaretz.com/israel-news/travel/seven-cool-natural-springs-of-israel-1.5388627.\n\n\nNational Park Service. 2022. ‚ÄúMississippi River Facts.‚Äù National Park Service. https://www.nps.gov/miss/riverfacts.htm.\n\n\nRaymond, Lyle S. Jr. 1988. ‚ÄúWhat Is Groundwater?‚Äù Cornell eCommons. https://ecommons.cornell.edu/handle/1813/3408.\n\n\nSuma Groulx. 2015. ‚ÄúWater Infiltration.‚Äù Suma Groulx. http://sumagroulx.com/water-infiltration/.\n\n\nValent√≠ Rodellas. 1988. ‚ÄúEvaluating Submarine Groundwater Discharge to the Mediterranean Sea by Using Radium Isotopes.‚Äù Research Gate. https://www.researchgate.net/figure/Principal-pathways-for-submarine-groundwater-discharge-to-the-coastal-ocean-including_fig1_274590439.\n\n\nWater Science School. 2016. ‚ÄúWater Flowing Underground Can Find Openings Back to the Land Surface.‚Äù U.S. Geological Survey. https://www.usgs.gov/media/images/water-flowing-underground-can-find-openings-back-land-surface.\n\n\n‚Äî‚Äî‚Äî. 2018. ‚ÄúWhere Is Earth‚Äôs Water?‚Äù U.S. Geological Survey. https://www.usgs.gov/special-topics/water-science-school/science/where-earths-water.\n\n\n‚Äî‚Äî‚Äî. 2019a. ‚ÄúConceptual Groundwater-Flow Diagram.‚Äù U.S. Geological Survey. https://www.usgs.gov/media/images/conceptual-groundwater-flow-diagram.\n\n\n‚Äî‚Äî‚Äî. 2019b. ‚ÄúGroundwater Is the Area Underground Where Openings Are Full of Water.‚Äù U.S. Geological Survey. https://www.usgs.gov/media/images/groundwater-area-underground-where-openings-are-full-water.\n\n\n‚Äî‚Äî‚Äî. 2019c. ‚ÄúHow Much Water Is There on Earth?‚Äù U.S. Geological Survey. https://www.usgs.gov/special-topics/water-science-school/science/how-much-water-there-earth.\n\n\n‚Äî‚Äî‚Äî. 2019d. ‚ÄúIce, Snow, and Glaciers and the Water Cycle.‚Äù U.S. Geological Survey. https://www.usgs.gov/special-topics/water-science-school/science/ice-snow-and-glaciers-and-water-cycle.\n\n\n‚Äî‚Äî‚Äî. 2019e. ‚ÄúPrecipitation and the Water Cycle.‚Äù U.S. Geological Survey. https://www.usgs.gov/special-topics/water-science-school/science/precipitation-and-water-cycle.\n\n\n‚Äî‚Äî‚Äî. 2019f. ‚ÄúRain and Precipitation.‚Äù U.S. Geological Survey. https://www.usgs.gov/special-topics/water-science-school/science/rain-and-precipitation.\n\n\n‚Äî‚Äî‚Äî. 2019g. ‚ÄúThe Natural Water Cycle.‚Äù U.S. Geological Survey. https://www.usgs.gov/media/images/natural-water-cycle-jpg.\n\n\n‚Äî‚Äî‚Äî. 2022. ‚ÄúThe Water Cycle.‚Äù U.S. Geological Survey. https://www.usgs.gov/media/images/water-cycle-png.\n\n\n◊ó◊ì◊©◊ï◊™ ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î. 2020. ‚Äú◊ê◊ï◊ë◊ö ◊ï◊û◊¢◊®◊õ◊™ ◊í◊©◊û◊ô◊ù ◊õ◊ë◊ì◊î ◊†◊ï◊°◊§◊™.‚Äù Melabes. https://www.melabes.co.il/news/51773."
  },
  {
    "objectID": "assignments/assignment-01-precipitation.html",
    "href": "assignments/assignment-01-precipitation.html",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "",
    "text": "This is where learning happens, not during a lecture. You‚Äôll learn a ton of things by doing them yourself. Much success! üòÑ\nCreate a Jupyter Notebook called assignment-01-IDNUMBER, where IDNUMBER is your 9-digit ID. This is the file only file we will check."
  },
  {
    "objectID": "assignments/assignment-01-precipitation.html#locations",
    "href": "assignments/assignment-01-precipitation.html#locations",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "9.2 üìå locations",
    "text": "9.2 üìå locations\nChoose two meteorologic stations from NOAA‚Äôs Global Summary of the Month.\nCriteria:\n1. at least 60 years of data for each station.\n2. choose stations with different characteristics, regarding mean annual precipitation, seasonality, extreme events, etc."
  },
  {
    "objectID": "assignments/assignment-01-precipitation.html#tasks",
    "href": "assignments/assignment-01-precipitation.html#tasks",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "9.3 üõ† tasks",
    "text": "9.3 üõ† tasks\nAnalyze the data and make graphs showing the differences and similarities between the two locations you chose. The analyses and graphs should be similar to those we saw during our lectures and exercise sessions. Of course, if you find something interesting we did not do in class, you are more than welcome to show it. Discuss about:\n1. mean annual precipitation and inter-annual variability.\n2. intra-annual variability (seasonality).\n3. extreme rainfall events and return times.\nYou will have two weeks to deliver your assignment. You should not hand in a dry document with only figures and code, I‚Äôm expecting text before and after each code/graph cell, explaining what you did, why you did it, and how it fits the story you are telling. Don‚Äôt forget to put labels on your plot axes, title, legend, etc.\nYour Jupyter Notebook should be fully functional: if we press Kernel > Restart & Run All, all the code must work without any errors."
  },
  {
    "objectID": "assignments/assignment-01-precipitation.html#presentation",
    "href": "assignments/assignment-01-precipitation.html#presentation",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "9.4 üåÖ presentation",
    "text": "9.4 üåÖ presentation\nAll the assignment must be in one single Jupyter Notebook. Use markdown cells to discuss the analysis and results, and in code cells show all the code you used to produce the figures and data analysis. Leave only the code necessary for your analysis, delete unnecessary lines your wrote while analyzing your data. Don‚Äôt forget to comment your code, just like we did during exercise sessions. You should write this assignment in English."
  },
  {
    "objectID": "assignments/assignment1-precipitation.html",
    "href": "assignments/assignment1-precipitation.html",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "",
    "text": "This is where learning happens, not during a lecture. You‚Äôll learn a ton of things by doing them yourself. Much success! üòÑ\nCreate a Jupyter Notebook called assignment-01-IDNUMBER, where IDNUMBER is your 9-digit ID. This is the file only file we will check."
  },
  {
    "objectID": "assignments/assignment1-precipitation.html#locations",
    "href": "assignments/assignment1-precipitation.html#locations",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "9.2 üìå locations",
    "text": "9.2 üìå locations\nChoose two meteorologic stations from NOAA‚Äôs Global Summary of the Month.\nCriteria:\n1. at least 60 years of data for each station.\n2. choose stations with different characteristics, regarding mean annual precipitation, seasonality, extreme events, etc."
  },
  {
    "objectID": "assignments/assignment1-precipitation.html#tasks",
    "href": "assignments/assignment1-precipitation.html#tasks",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "9.3 üõ† tasks",
    "text": "9.3 üõ† tasks\nAnalyze the data and make graphs showing the differences and similarities between the two locations you chose. The analyses and graphs should be similar to those we saw during our lectures and exercise sessions. Of course, if you find something interesting we did not do in class, you are more than welcome to show it. Discuss about:\n1. mean annual precipitation and inter-annual variability.\n2. intra-annual variability (seasonality).\n3. extreme rainfall events and return times.\nYou will have two weeks to deliver your assignment. You should not hand in a dry document with only figures and code, I‚Äôm expecting text before and after each code/graph cell, explaining what you did, why you did it, and how it fits the story you are telling. Don‚Äôt forget to put labels on your plot axes, title, legend, etc.\nYour Jupyter Notebook should be fully functional: if we press Kernel > Restart & Run All, all the code must work without any errors."
  },
  {
    "objectID": "assignments/assignment1-precipitation.html#presentation",
    "href": "assignments/assignment1-precipitation.html#presentation",
    "title": "9¬† Assignment 1 - Precipitation",
    "section": "9.4 üåÖ presentation",
    "text": "9.4 üåÖ presentation\nAll the assignment must be in one single Jupyter Notebook. Use markdown cells to discuss the analysis and results, and in code cells show all the code you used to produce the figures and data analysis. Leave only the code necessary for your analysis, delete unnecessary lines your wrote while analyzing your data. Don‚Äôt forget to comment your code, just like we did during exercise sessions. You should write this assignment in English."
  },
  {
    "objectID": "assignments/assignment2-ET.html",
    "href": "assignments/assignment2-ET.html",
    "title": "10¬† Assignment 2 - Evapotranspiration",
    "section": "",
    "text": "toc: false\nbadges: true\ncomments: false\ncategories: [jupyter]"
  },
  {
    "objectID": "assignments/assignment2-ET.html#instructions",
    "href": "assignments/assignment2-ET.html#instructions",
    "title": "10¬† Assignment 2 - Evapotranspiration",
    "section": "10.1 üìí instructions",
    "text": "10.1 üìí instructions\nThis is where learning happens, not during a lecture. You‚Äôll learn a ton of things by doing them yourself. Much success! üòÑ\nCreate a Jupyter Notebook called assignment-02-IDNUMBER, where IDNUMBER is your 9-digit ID. This is the file only file we will check."
  },
  {
    "objectID": "assignments/assignment2-ET.html#locations-and-data",
    "href": "assignments/assignment2-ET.html#locations-and-data",
    "title": "10¬† Assignment 2 - Evapotranspiration",
    "section": "10.2 üìå locations and data",
    "text": "10.2 üìå locations and data\nChoose two stations with different climates.\nGo to NOAA‚Äôs Climate Reference Network Data website. The sub-hourly (5-min) data contains information on * air temperature, * precipitation, * global solar radiation, * surface infrared temperature, * relative humidity, * soil moisture and temperature, * wetness, and * 1.5 meter wind speed.\nThere is no data on air pressure, so one needs to use the stations coordinates (lat, lon) to find its height above sea level, and from that infer the air pressure. You can use Google Earth or any other means to find the station‚Äôs height.\nIn the Data Access link, choose a year and a station you would like to analyze. If you are not sure where the stations are, find them using the 2-letter state abbreviation and the station name.\nDownload the following files: 1. One full year of data for each station. Make sure important data we need to calculate Penman‚Äôs ET estimation is available. 2. The headers file 3. The documentation file\nMake sure you understand what are the units provided for each measurement (see documentation)."
  },
  {
    "objectID": "assignments/assignment2-ET.html#tasks",
    "href": "assignments/assignment2-ET.html#tasks",
    "title": "10¬† Assignment 2 - Evapotranspiration",
    "section": "10.3 üõ† tasks",
    "text": "10.3 üõ† tasks\nProduce potential ET estimates using Thornthwaite‚Äôs equation and Penman‚Äôs equation. Produce plots of ET as a function of time for each station, comparing the two methods you used. Also, using Penman‚Äôs ET estimates, compare the two stations and discuss about their differences/similarities.\nYou might find interesting things in the data, such as periods of unusually high/low temperatures, radiation, etc. Discuss how these factors might have affected the ET estimates that you calculated.\nYou will have two weeks to deliver your assignment. You should not hand in a dry document with only figures and code, I‚Äôm expecting text before and after each code/graph cell, explaining what you did, why you did it, and how it fits the story you are telling. Don‚Äôt forget to put labels on your plot axes, title, legend, etc.\nYour Jupyter Notebook should be fully functional: if we press Kernel > Restart & Run All, all the code must work without any errors."
  },
  {
    "objectID": "assignments/assignment2-ET.html#presentation",
    "href": "assignments/assignment2-ET.html#presentation",
    "title": "10¬† Assignment 2 - Evapotranspiration",
    "section": "10.4 üåÖ presentation",
    "text": "10.4 üåÖ presentation\nAll the assignment must be in one single Jupyter Notebook. Use markdown cells to discuss the analysis and results, and in code cells show all the code you used to produce the figures and data analysis. Leave only the code necessary for your analysis, delete unnecessary lines your wrote while analyzing your data. Don‚Äôt forget to comment your code, just like we did during exercise sessions.\nYou can write in English or in Hebrew, but the text in the figures must be in English. If you choose to write the discussion in Hebrew, be aware that Jupyter Notebooks don‚Äôt have native right-to-left language support:\n◊†◊ô◊™◊ü ◊ú◊õ◊™◊ï◊ë ◊ë◊¢◊ë◊®◊ô◊™, ◊ú◊û◊®◊ï◊™ ◊©◊ñ◊î ◊ú◊ê ◊†◊®◊ê◊î ◊õ◊¥◊õ ◊ò◊ï◊ë‚Ä¶\nYou can use some HTML code to achieve best results in Hebrew. Type the following\n<p dir=\"rtl\" style=\"text-align: right;\">\n◊¢◊õ◊©◊ô◊ï ◊î◊®◊ë◊î ◊ô◊ï◊™◊® ◊ò◊ï◊ë!\n</p>\nto get\n\n◊¢◊õ◊©◊ô◊ï ◊î◊®◊ë◊î ◊ô◊ï◊™◊® ◊ò◊ï◊ë!\n\nIf you have many paragraphs in hebrew, do the following:\n\n◊§◊°◊ß◊î ◊û◊°◊§◊® 1.\n\n\n◊§◊°◊ß◊î ◊û◊°◊§◊® 2.\n\n\n◊ê◊ù ◊ô◊© ◊ú◊õ◊ù ◊õ◊û◊î ◊§◊°◊ß◊ê◊ï◊™, ◊õ◊ú ◊ê◊ó◊™ ◊û◊î◊ü ◊™◊î◊ô◊î ◊ë◊™◊ï◊ö ‚Äúdir‚Äù ◊û◊©◊ú◊î\n\nIn my opinion it is too complicated to write in Hebrew in Jupyter Notebooks, just write in English, your grade will not be affected by typos nor less-than-perfect English proficiency."
  },
  {
    "objectID": "assignments/assignment2-ET.html#evaluation",
    "href": "assignments/assignment2-ET.html#evaluation",
    "title": "10¬† Assignment 2 - Evapotranspiration",
    "section": "10.5 üíØ evaluation",
    "text": "10.5 üíØ evaluation\nYour assignment will be evaluated according to the following criteria: * 40% Presentation. How the graphs look, labels, general organization, markdown, clean code. * 30% Discussion. This is where you explain what you did, what you found out, etc. * 15% Depth of analysis. You can analyze/explore the data with different levels of complexity, this is where we take that into consideration. * 10% Replicability: Your code runs flawlessly. * 5%: Code commenting. Explain in your code what you are doing, this is good for everyone, especially for yourself!"
  },
  {
    "objectID": "assignments/assignment2-ET.html#importing-the-data",
    "href": "assignments/assignment2-ET.html#importing-the-data",
    "title": "10¬† Assignment 2 - Evapotranspiration",
    "section": "10.6 üöö importing the data",
    "text": "10.6 üöö importing the data\nBelow you can find an example of how to import the data file provided by NOAA‚Äôs Climate Reference Network Data website. You might have to make some adjustments to it.\ndata_file = \"CRNS0101-05-2020-CO_Boulder_14_W.txt\"\ndf = pd.read_csv(data_file,\n                 header=None,                      # no headers needed, we'll do that later\n                 delim_whitespace=True,            # blank spaces separate between columns\n                 na_values=[\"-99.000\", \"-9999.0\"]  # substitute these values for missing (NaN) values\n                )\nheaders = pd.read_csv(\"HEADERS_sub_hourly.txt\",    # load headers file\n                      header=1,                    # skip the first [0] line\n                      delim_whitespace=True\n                     )\ndf.columns = headers.columns                       # rename df columns with headers columns\n# LST = local standard time\ndf[\"LST_TIME\"] = [f\"{x:04d}\" for x in df[\"LST_TIME\"]]  # time needs padding of zeros, then convert to string\ndf['LST_DATE'] = df['LST_DATE'].astype(str)            # convert date into string\ndf['datetime'] = df['LST_DATE'] + ' ' + df['LST_TIME'] # combine date+time into datetime\ndf['datetime'] = pd.to_datetime(df['datetime'])        # interpret datetime\ndf = df.set_index('datetime')                          # make datetime the index\ndf"
  },
  {
    "objectID": "assignments/assignment3-streamflow.html",
    "href": "assignments/assignment3-streamflow.html",
    "title": "11¬† Assignment 3 - Streamflow",
    "section": "",
    "text": "toc: false\nbadges: true\ncomments: false\ncategories: [jupyter]"
  },
  {
    "objectID": "assignments/assignment3-streamflow.html#instructions",
    "href": "assignments/assignment3-streamflow.html#instructions",
    "title": "11¬† Assignment 3 - Streamflow",
    "section": "11.1 üìí instructions",
    "text": "11.1 üìí instructions\nThis is where learning happens, not during a lecture. You‚Äôll learn a ton of things by doing them yourself. Much success! üòÑ\nCreate a Jupyter Notebook called assignment-03-IDNUMBER, where IDNUMBER is your 9-digit ID. This is the file only file we will check."
  },
  {
    "objectID": "assignments/assignment3-streamflow.html#locations-and-data",
    "href": "assignments/assignment3-streamflow.html#locations-and-data",
    "title": "11¬† Assignment 3 - Streamflow",
    "section": "11.2 üìå locations and data",
    "text": "11.2 üìå locations and data\nChoose one location in the US.\n\nImport streamflow data from USGS‚Äôs National Water Information System. Choose on the map any measuring station you see fit. Make sure there is available discharge data (usually given in cubic feet per second) in small time intervals, e.g., every 15 minutes.\nGo to NOAA‚Äôs Climate Reference Network Data website. The sub-hourly (5-min) data contains information on many variables, we are interested in precipitation.\n\nAttention! Some os the USGS stations provide precipitation data. If you find one such station, step 2 above is unnecessary. If you only find discharge data in the USGS website, then make sure you choose two stations in very close proximity (USGS and NOAA). Because there are only a few high-resolution NOAA stations, you might want to start from there and then find discharge data for a stream near the NOAA station.\nBottom line: you are looking for precipitation and stream discharge data, for stations in close proximity, with a high temporal resolution (5 min, 15 min, etc)."
  },
  {
    "objectID": "assignments/assignment3-streamflow.html#tasks",
    "href": "assignments/assignment3-streamflow.html#tasks",
    "title": "11¬† Assignment 3 - Streamflow",
    "section": "11.3 üõ† tasks",
    "text": "11.3 üõ† tasks\nChoose a rain event of a few hours in your data set. Find the rate of effective water input (p) and the event flow rate (q). Analyze the data in a similar was as done during class (various graphs explaining what you see). Find also the characteristic times of the event (centroid lag \\(T_{LC}\\), and centroid lag-to-peak \\(T_{LPC}\\)).\nTry to find information on the climate, geography, soil, and land use of the watershed. Begin the assignment by explaining about the watershed you chose and characterizing it. When presenting the data and your analyses, discuss what you see based on the concepts learned in class (infiltration, runoff generation, and the factors that affect them). Does the information you found match what you see? What makes sense, and what doesn‚Äôt?\nDiscussion is important!\nYou will have two weeks to deliver your assignment. You should not hand in a dry document with only figures and code, I‚Äôm expecting text before and after each code/graph cell, explaining what you did, why you did it, and how it fits the story you are telling. Don‚Äôt forget to put labels on your plot axes, title, legend, etc.\nYour Jupyter Notebook should be fully functional: if we press Kernel > Restart & Run All, all the code must work without any errors."
  },
  {
    "objectID": "assignments/assignment3-streamflow.html#presentation",
    "href": "assignments/assignment3-streamflow.html#presentation",
    "title": "11¬† Assignment 3 - Streamflow",
    "section": "11.4 üåÖ presentation",
    "text": "11.4 üåÖ presentation\nAll the assignment must be in one single Jupyter Notebook. Use markdown cells to discuss the analysis and results, and in code cells show all the code you used to produce the figures and data analysis. Leave only the code necessary for your analysis, delete unnecessary lines your wrote while analyzing your data. Don‚Äôt forget to comment your code, just like we did during exercise sessions.\nYou can write in English or in Hebrew, but the text in the figures must be in English. If you choose to write the discussion in Hebrew, be aware that Jupyter Notebooks don‚Äôt have native right-to-left language support:\n◊†◊ô◊™◊ü ◊ú◊õ◊™◊ï◊ë ◊ë◊¢◊ë◊®◊ô◊™, ◊ú◊û◊®◊ï◊™ ◊©◊ñ◊î ◊ú◊ê ◊†◊®◊ê◊î ◊õ◊¥◊õ ◊ò◊ï◊ë‚Ä¶\nYou can use some HTML code to achieve best results in Hebrew. Type the following\n<p dir=\"rtl\" style=\"text-align: right;\">\n◊¢◊õ◊©◊ô◊ï ◊î◊®◊ë◊î ◊ô◊ï◊™◊® ◊ò◊ï◊ë!\n</p>\nto get\n\n◊¢◊õ◊©◊ô◊ï ◊î◊®◊ë◊î ◊ô◊ï◊™◊® ◊ò◊ï◊ë!\n\nIf you have many paragraphs in hebrew, do the following:\n\n◊§◊°◊ß◊î ◊û◊°◊§◊® 1.\n\n\n◊§◊°◊ß◊î ◊û◊°◊§◊® 2.\n\n\n◊ê◊ù ◊ô◊© ◊ú◊õ◊ù ◊õ◊û◊î ◊§◊°◊ß◊ê◊ï◊™, ◊õ◊ú ◊ê◊ó◊™ ◊û◊î◊ü ◊™◊î◊ô◊î ◊ë◊™◊ï◊ö ‚Äúdir‚Äù ◊û◊©◊ú◊î\n\nIn my opinion it is too complicated to write in Hebrew in Jupyter Notebooks, just write in English, your grade will not be affected by typos nor less-than-perfect English proficiency."
  },
  {
    "objectID": "assignments/assignment3-streamflow.html#evaluation",
    "href": "assignments/assignment3-streamflow.html#evaluation",
    "title": "11¬† Assignment 3 - Streamflow",
    "section": "11.5 üíØ evaluation",
    "text": "11.5 üíØ evaluation\nYour assignment will be evaluated according to the following criteria: * 40% Presentation. How the graphs look, labels, general organization, markdown, clean code. * 30% Discussion. This is where you explain what you did, what you found out, etc. * 15% Depth of analysis. You can analyze/explore the data with different levels of complexity, this is where we take that into consideration. * 10% Replicability: Your code runs flawlessly. * 5%: Code commenting. Explain in your code what you are doing, this is good for everyone, especially for yourself!"
  },
  {
    "objectID": "assignments/assignment3-streamflow.html#importing-the-data",
    "href": "assignments/assignment3-streamflow.html#importing-the-data",
    "title": "11¬† Assignment 3 - Streamflow",
    "section": "11.6 üöö importing the data",
    "text": "11.6 üöö importing the data\nYou can use the code from previous assignments and from the exercise lectures."
  },
  {
    "objectID": "assignments/assignment-FINAL.html",
    "href": "assignments/assignment-FINAL.html",
    "title": "12¬† Final Assignment",
    "section": "",
    "text": "This is where learning happens, not during a lecture. You‚Äôll learn a ton of things by doing them yourself. Much success! üòÑ\nCreate two Jupyter Notebooks called 1. assignment-FINAL-CODE-IDNUMBER, and 2. assignment-FINAL-REPORT-IDNUMBER, where IDNUMBER is your 9-digit ID. These are the only files we will check."
  },
  {
    "objectID": "assignments/assignment-FINAL.html#locations-and-data",
    "href": "assignments/assignment-FINAL.html#locations-and-data",
    "title": "12¬† Final Assignment",
    "section": "12.2 üìå locations and data",
    "text": "12.2 üìå locations and data\nChoose one location in the US.\nDownload relevant data from NOAA‚Äôs Global Summary of the Month, NOAA‚Äôs Climate Reference Network Data, and from the USGS‚Äôs National Water Information System.\nTry to find locations with many years of data, the more the better. Take some time to choose your station, plan well. Choose a location you have not worked with in past assignments."
  },
  {
    "objectID": "assignments/assignment-FINAL.html#tasks",
    "href": "assignments/assignment-FINAL.html#tasks",
    "title": "12¬† Final Assignment",
    "section": "12.3 üõ† tasks",
    "text": "12.3 üõ† tasks\nIn this final project, we will integrate the various topics we learned throughout the semester. You will tell a story about the location you chose, and describe the changes it experienced in the past many decades. You can focus on any kind of changes that would influence the hydrological fluxes we learned about. Here are a few examples of changes that you might work on: * severe droughts in part of the studied period, or an increasing trend in drought severity. * same as above for rainfall/floods, high temperatures, low temperatures, etc. * significant changes in land use, such as urbanization, deforestation, agricultural practices, etc.\nThe list above is not comprehensive, you can choose other factors. Consult with me in case of doubt.\nTry to find on the media and in scientific papers evidence for the change you are focusing on. Cite these sources: at least one peer-reviewed scientific paper, and at least 3 other sources, such as a government website, official weather sites, books, reputable news websites, etc.\nCan you see the same when analyzing data for the location you chose? Do your findings corroborate the expectation you had when you started this project? If they don‚Äôt, can you explain why? Did you reach interesting or surprising conclusions in your analysis?\nAnalyze your location‚Äôs history with respect to the following: * Precipitation: seasonality, inter-annual variability, extreme precipitation events and return periods. * Potential evapotranspiration: Calculate PET using Penman‚Äôs equation for at least three different years of interest (not necessarily contiguous years). Calculate Thornthwaite‚Äôs PET for the whole length of the available data (comment about the suitability of Thornthwaite‚Äôs PET to the location you chose). * Analyze streamflow statistics in a similar manner as for precipitation: extreme discharge events and return periods. * Use Budyko‚Äôs framework to calculate where the location you chose falls on the \\((ET/P,PET/P)\\) space for at least three different years of interest.\nTry to connect the dots: how do your different findings fit together? Discuss what you are trying to show, tell your story with the help of the data and your analyses. If you find things that go contrary to your expectations, can you raise hypotheses of why you see what you see?\nYou will have one month to hand in your project.\nMuch success! üòÅ"
  },
  {
    "objectID": "assignments/assignment-FINAL.html#presentation",
    "href": "assignments/assignment-FINAL.html#presentation",
    "title": "12¬† Final Assignment",
    "section": "12.4 üåÖ presentation",
    "text": "12.4 üåÖ presentation\nAll the assignment must be in two Jupyter Notebooks.\nThe notebook called CODE will contain all the code for the analyses you made. It must be fully functional, i.e., we must be able to Run All and not get any errors. Explain what you are doing in each step. Comment your code. Use markdown cells to split the notebook into subsections, one for each analysis (e.g.: ## Precipitation Analysis, ### Inter-annual variability, etc).\nThe notebook called Report will contain graphs and relevant data from the CODE notebook. It is here where you will introduce the location you chose, what you are trying to see. Here you will write all the results and discussion, as supported by the graphs and results you produced. Divide this notebook into sections: Introduction, Results and Discussion, Conclusion. Subdivide the sections into subsections when needed. In this file there should be no code at all.\nYou can write in English or in Hebrew, but the text in the figures must be in English. If you choose to write the discussion in Hebrew, be aware that Jupyter Notebooks don‚Äôt have native right-to-left language support:\n◊†◊ô◊™◊ü ◊ú◊õ◊™◊ï◊ë ◊ë◊¢◊ë◊®◊ô◊™, ◊ú◊û◊®◊ï◊™ ◊©◊ñ◊î ◊ú◊ê ◊†◊®◊ê◊î ◊õ◊¥◊õ ◊ò◊ï◊ë‚Ä¶\nYou can use some HTML code to achieve best results in Hebrew. Type the following\n<p dir=\"rtl\" style=\"text-align: right;\">\n◊¢◊õ◊©◊ô◊ï ◊î◊®◊ë◊î ◊ô◊ï◊™◊® ◊ò◊ï◊ë!\n</p>\nto get\n\n◊¢◊õ◊©◊ô◊ï ◊î◊®◊ë◊î ◊ô◊ï◊™◊® ◊ò◊ï◊ë!\n\nIf you have many paragraphs in hebrew, do the following:\n\n◊§◊°◊ß◊î ◊û◊°◊§◊® 1.\n\n\n◊§◊°◊ß◊î ◊û◊°◊§◊® 2.\n\n\n◊ê◊ù ◊ô◊© ◊ú◊õ◊ù ◊õ◊û◊î ◊§◊°◊ß◊ê◊ï◊™, ◊õ◊ú ◊ê◊ó◊™ ◊û◊î◊ü ◊™◊î◊ô◊î ◊ë◊™◊ï◊ö ‚Äúdir‚Äù ◊û◊©◊ú◊î\n\nIn my opinion it is too complicated to write in Hebrew in Jupyter Notebooks, just write in English, your grade will not be affected by typos nor less-than-perfect English proficiency."
  },
  {
    "objectID": "assignments/assignment-FINAL.html#evaluation",
    "href": "assignments/assignment-FINAL.html#evaluation",
    "title": "12¬† Final Assignment",
    "section": "12.5 üíØ evaluation",
    "text": "12.5 üíØ evaluation\nYour assignment will be evaluated according to the following criteria: * 40% Presentation. How the graphs look, labels, general organization, markdown, clean code. * 30% Discussion. This is where you explain what you did, what you found out, etc. * 15% Depth of analysis. You can analyze/explore the data with different levels of complexity, this is where we take that into consideration. * 10% Replicability: Your code runs flawlessly. * 5%: Code commenting. Explain in your code what you are doing, this is good for everyone, especially for yourself!"
  },
  {
    "objectID": "assignments/assignment-FINAL.html#importing-the-data",
    "href": "assignments/assignment-FINAL.html#importing-the-data",
    "title": "12¬† Final Assignment",
    "section": "12.6 üöö importing the data",
    "text": "12.6 üöö importing the data\nYou can use the code from previous assignments and from the exercise lectures."
  }
]