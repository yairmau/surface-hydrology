[
  {
    "objectID": "precipitation/return-period-exercises.html",
    "href": "precipitation/return-period-exercises.html",
    "title": "8  Exercises",
    "section": "",
    "text": "Show/hide the code\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom functools import reduce\nimport re\nimport probscale\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport urllib.request\n\n\nGo to NOAA’s National Centers for Environmental Information (NCEI)\nClimate Data Online: Dataset Discovery\nFind station codes in this map. On the left, click on the little wrench next to “Global Summary of the Month”, then click on “identify” on the panel that just opened, and click on a station (purple circle). You will see the station’s name, it’s ID, and the period of record. For example, for Ben-Gurion’s Airport in Israel:\nBEN GURION, IS\nSTATION ID: ISM00040180\nPeriod of Record: 1951-01-01 to 2020-03-01\nYou can download daily or monthly data for each station. Use the function below to download this data to your computer. station_name can be whatever you want, station_code is the station ID.\n\n\nShow/hide the code\ndef download_data(station_name, station_code):\n    url_daily = 'https://www.ncei.noaa.gov/data/global-historical-climatology-network-daily/access/'\n    url_monthly = 'https://www.ncei.noaa.gov/data/gsom/access/'\n    # download daily data - uncomment the following 2 lines to make this work\n    # urllib.request.urlretrieve(url_daily + station_code + '.csv',\n    #                           station_name + '_daily.csv')\n    # download monthly data\n    urllib.request.urlretrieve(url_monthly + station_code + '.csv',\n                               station_name + '_monthly.csv')\n\n\nDownload daily rainfall data for Eilat, Israel. ID: IS000009972\n\n\nShow/hide the code\ndownload_data('Eilat', 'IS000009972')\n\n\nThen load the data into a dataframe.\nIMPORTANT!! daily precipitation data is in tenths of mm, divide by 10 to get it in mm.\n\n\nShow/hide the code\ndf = pd.read_csv('Eilat_daily.csv', sep=\",\")\n# make 'DATE' the dataframe index\ndf['DATE'] = pd.to_datetime(df['DATE'])\ndf = df.set_index('DATE')\n# IMPORTANT!! daily precipitation data is in tenths of mm, divide by 10 to get it in mm.\ndf['PRCP'] = df['PRCP'] / 10\ndf\n\n\n\n\n\n\n  \n    \n      \n      STATION\n      LATITUDE\n      LONGITUDE\n      ELEVATION\n      NAME\n      PRCP\n      PRCP_ATTRIBUTES\n      TMAX\n      TMAX_ATTRIBUTES\n      TMIN\n      TMIN_ATTRIBUTES\n      TAVG\n      TAVG_ATTRIBUTES\n    \n    \n      DATE\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1949-11-30\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-01\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-02\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-03\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1949-12-04\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-03-24\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      287.0\n      ,,S\n      NaN\n      NaN\n      227.0\n      H,,S\n    \n    \n      2021-03-25\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      253.0\n      ,,S\n      154.0\n      ,,S\n      202.0\n      H,,S\n    \n    \n      2021-03-26\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      251.0\n      ,,S\n      134.0\n      ,,S\n      186.0\n      H,,S\n    \n    \n      2021-03-27\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      222.0\n      ,,S\n      119.0\n      ,,S\n      173.0\n      H,,S\n    \n    \n      2021-03-28\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      NaN\n      NaN\n      238.0\n      ,,S\n      119.0\n      ,,S\n      188.0\n      H,,S\n    \n  \n\n26045 rows × 13 columns\n\n\n\nPlot precipitation data (‘PRCP’ column) and see if everything is all right.\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10,7))\nax.plot(df['PRCP'])\nax.set_xlabel(\"date\")\nax.set_ylabel(\"daily rainfall (mm)\")\nax.set_title(\"Eilat, 1949–2021\")\n\n\nText(0.5, 1.0, 'Eilat, 1949–2021')\n\n\n\n\n\nBased on what you see, you might want to exclude certain periods, e.g.:\n\n\nShow/hide the code\nlast_date = '2018-08-01'\nfirst_date = '1950-08-01'\ndf = df[((df.index < last_date) & (df.index > first_date))]\ndf\n\n\n\n\n\n\n  \n    \n      \n      STATION\n      LATITUDE\n      LONGITUDE\n      ELEVATION\n      NAME\n      PRCP\n      PRCP_ATTRIBUTES\n      TMAX\n      TMAX_ATTRIBUTES\n      TMIN\n      TMIN_ATTRIBUTES\n      TAVG\n      TAVG_ATTRIBUTES\n    \n    \n      DATE\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1950-08-02\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      400.0\n      ,,G\n      240.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-03\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      410.0\n      ,,G\n      260.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-04\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      400.0\n      ,,G\n      260.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-05\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      NaN\n      NaN\n      240.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      1950-08-06\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,E\n      370.0\n      ,,G\n      240.0\n      ,,G\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2018-07-27\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      414.0\n      ,,S\n      NaN\n      NaN\n      359.0\n      H,,S\n    \n    \n      2018-07-28\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      386.0\n      ,,S\n      NaN\n      NaN\n      329.0\n      H,,S\n    \n    \n      2018-07-29\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      NaN\n      NaN\n      268.0\n      ,,S\n      334.0\n      H,,S\n    \n    \n      2018-07-30\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      375.0\n      ,,S\n      277.0\n      ,,S\n      327.0\n      H,,S\n    \n    \n      2018-07-31\n      IS000009972\n      29.55\n      34.95\n      12.0\n      ELAT, IS\n      0.0\n      ,,S\n      390.0\n      ,,S\n      NaN\n      NaN\n      336.0\n      H,,S\n    \n  \n\n24836 rows × 13 columns\n\n\n\nThe rainfall data for Eilat is VERY seasonal, it’s easy to see that there is no rainfall at all during the summer. We can assume a hydrological year starting on 1 August. If you’re not sure, you can plot the monthly means (see last week’s lecture) and find what date makes sense best.\n\n\nShow/hide the code\ndf_month = df['PRCP'].resample('M').sum().to_frame()\nmonth_numbers = np.arange(1,13)\nmonthly_mean = np.array([])  # empty array\nfor m in month_numbers:      # cycle over months (1, 2, 3, etc)\n    this_month_mean = df_month[df_month.index.month == m].mean()  # this is the monthly mean\n    monthly_mean = np.append(monthly_mean, this_month_mean)    # append\n    # make new df and return it\ndf_month = pd.DataFrame({'monthly rainfall (mm)':monthly_mean,\n                          'month number':month_numbers\n                         })\nfig, ax = plt.subplots(figsize=(10,7))\nax.bar(df_month['month number'], df_month['monthly rainfall (mm)'])\nax.set(xlabel=\"month\",\n       ylabel=\"monthly rainfall (mm)\",\n       title=\"Monthly average, Eilat, 1949--2018\",\n       xticks=np.arange(1,13));\n\n\n\n\n\nLet’s resample the data according to the hydrological year (1 August), and we’ll keep the maximum value:\n\n\nShow/hide the code\nmax_annual = (df['PRCP'].resample('A-JUL')\n                        .max()\n                        .to_frame()\n             )\nmax_annual\n\n\n\n\n\n\n  \n    \n      \n      PRCP\n    \n    \n      DATE\n      \n    \n  \n  \n    \n      1951-07-31\n      10.8\n    \n    \n      1952-07-31\n      15.0\n    \n    \n      1953-07-31\n      34.4\n    \n    \n      1954-07-31\n      24.3\n    \n    \n      1955-07-31\n      19.0\n    \n    \n      ...\n      ...\n    \n    \n      2014-07-31\n      11.5\n    \n    \n      2015-07-31\n      2.4\n    \n    \n      2016-07-31\n      8.5\n    \n    \n      2017-07-31\n      34.5\n    \n    \n      2018-07-31\n      11.7\n    \n  \n\n68 rows × 1 columns\n\n\n\nMake two graphs: a) the histogram for the annual maximum (pdf) b) the cumulative probability (cdf)\n\n\nShow/hide the code\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10,8))\n\nh=max_annual['PRCP'].values\nax1.hist(h, bins=np.arange(0,100,10), density=True)\nax2.hist(h, bins=np.arange(0,100,10), cumulative=1, density=True)\n\nax1.set(ylabel=\"pdf\")\nax2.set(xlabel=\"annual max (mm)\",\n        ylabel=\"cdf\",\n        );\n\n\n\n\n\nCompute the plotting position and return time. You’ll need to order the data in ascending order:\nmax_annual = max_annual.sort_values(by=['PRCP'], ascending=True)\n\\(P_m=\\) plotting position, or probability of occurence for each event\n\\(n=\\) total number of events\n\\(m=\\) rank of each event, where \\(m=1\\) is the lowest value, and \\(m=n\\) is the highest\n\n8.0.0.1 Weibull plotting position:\n\\[\nP_m = \\frac{m}{n+1}\n\\]\n\n\n8.0.0.2 Return period:\n\\[\n\\text{Return period} = T_r = \\frac{1}{1-P_m}\n\\]\nPlot the annual maximum against \\(P_m\\) or against \\(T_r\\).\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10, 7))\n# resample daily data into yearly data (maximum yearly value)\nmax_annual = df['PRCP'].resample('A-JUL').max().to_frame()\n# sort yearly max from lowest to highest\nmax_annual = max_annual.sort_values(by=['PRCP'], ascending=True)\nmax_annual['rank'] = np.arange(1, len(max_annual) + 1)\nprint(max_annual)\n\nn = len(max_annual['rank'])\nm = max_annual['rank']\nPm = m / (n+1)\nTr = 1 / (1 - Pm)\n\n# ax.plot(Tr, max_annual['PRCP'])\n# ax.set(xlabel=\"return period (y)\",\n#        ylabel=\"annual maximum (mm/24h)\")\n\nax.plot(Pm, max_annual['PRCP'])\nax.set(xlabel=\"non-exeedance probability\",\n       ylabel=\"annual maximum (mm/24h)\");\n\n\n            PRCP  rank\nDATE                  \n1996-07-31   0.5     1\n2008-07-31   0.9     2\n2000-07-31   1.2     3\n2012-07-31   1.3     4\n1959-07-31   1.5     5\n...          ...   ...\n1966-07-31  33.8    64\n1953-07-31  34.4    65\n2017-07-31  34.5    66\n1981-07-31  40.6    67\n1975-07-31  64.3    68\n\n[68 rows x 2 columns]\n\n\n\n\n\nPlot the annual maximum against the exceedance probability (\\(1-P_m\\)), in a log-log scale. Use\nax.set(xscale=\"log\",\n       yscale(\"log\")\n      )\nSee what data you’ll want to use for a linear fit.\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10, 6))\n\ndepth = max_annual['PRCP'].values\nexc_prob = (1-Pm).values\n\nax.plot(exc_prob, depth, lw=3)\n\nexclude = 40\ndepth_tofit = depth[exclude:]\nexc_prob_tofit = exc_prob[exclude:]\nax.plot(exc_prob_tofit, depth_tofit, 'o')\n\nax.set(ylabel=\"annual maximum (mm/24h)\",\n       xlabel=\"exceedance probability\",\n       xscale=\"log\",\n       yscale=\"log\",\n      );\n\n\n\n\n\nLet’s make a linear fit. Attention! Our data is not annual_max and exceedance_prob, but their log.\nWe make a linear fit using:\nslope, intercept = np.polyfit(xdata, ydata, 1) # the number 1 in the order of the polynomial = linear\nWrite a function that receives an exceedance probability and returns the corresponding rainfall depth.\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10, 6))\n\ndepth = max_annual['PRCP'].values\nexc_prob = (1-Pm).values\n\nax.plot(exc_prob, depth, lw=3, label=\"Weibull plotting position\")\nax.set(ylabel=\"annual maximum (mm/24h)\",\n       xlabel=\"exceedance probability\")\nax.set_xscale(\"log\")\nax.set_yscale(\"log\")\n\nexclude = 40\ndepth_tofit = depth[exclude:]\nexc_prob_tofit = exc_prob[exclude:]\n\nax.plot(exc_prob_tofit, depth_tofit, 'o')\n\nexc_prob_tofit_log = np.log(exc_prob_tofit)\ndepth_tofit_log = np.log(depth_tofit)\nslope, intercept = np.polyfit(exc_prob_tofit_log, depth_tofit_log, 1)\n\ndef equation(p):\n    return np.exp(slope*np.log(p) + intercept)\nprob = [1e-3,1-1e-3]\nax.plot(prob, equation(prob), lw=3, color=\"tab:red\", alpha=0.4)\n\n\n\n\n\n\n\n8.0.1 Homework\nEverything we did today was for 24h rainfall events. We might be interested in extreme events in longer or shorter time scales. Using the following code, calculate the return time for 3-day rainfall events:\nnumber_of_days = 3\ndf2 = (df['PRCP'].rolling(number_of_days)\n                 .sum()\n                 .dropna()\n      ) \nAll the rest after that is the same…"
  },
  {
    "objectID": "precipitation/intra-annual-exercises.html",
    "href": "precipitation/intra-annual-exercises.html",
    "title": "6  Exercises",
    "section": "",
    "text": "Import relevant packages"
  },
  {
    "objectID": "precipitation/intra-annual-exercises.html#intra-annual-variability",
    "href": "precipitation/intra-annual-exercises.html#intra-annual-variability",
    "title": "6  Exercises",
    "section": "6.1 intra-annual variability",
    "text": "6.1 intra-annual variability\nGo to NOAA’s National Centers for Environmental Information (NCEI)\nClimate Data Online: Dataset Discovery\nFind station codes in this map. On the left, click on the little wrench (🔧) next to “Global Summary of the Month”, then click on “identify” on the panel that just opened, and click on a station (purple circle). You will see the station’s name, it’s ID, and the period of record. For example, for Ben-Gurion’s Airport in Israel:\nBEN GURION, IS\nSTATION ID: ISM00040180\nPeriod of Record: 1951-01-01 to 2020-03-01\nYou can download daily or monthly data for each station. Use the function below to download this data to your computer.\n\n\nShow/hide the code\ndef download_data(station_name, station_code):\n    url_daily = 'https://www.ncei.noaa.gov/data/global-historical-climatology-network-daily/access/'\n    url_monthly = 'https://www.ncei.noaa.gov/data/gsom/access/'\n    # download daily data - uncomment the next 2 lines to make this work\n    # urllib.request.urlretrieve(url_daily + station_code + '.csv',\n    #                            station_name + '_daily.csv')\n    # download monthly data\n    urllib.request.urlretrieve(url_monthly + station_code + '.csv',\n                               station_name + '_monthly.csv')\n\n\nNow, choose any station with a period of record longer than 30 years, and download its data:\ndownload_data('BEN_GURION', 'ISM00040180')\nLoad the data into a datafram, and before you continue with the analysis, plot the rainfall data, to see how it looks like.\n\n\nShow/hide the code\ndownload_data('BEN_GURION', 'ISM00040180')\ndf = pd.read_csv('BEN_GURION_monthly.csv', sep=\",\")\n# make 'DATE' the dataframe index\ndf['DATE'] = pd.to_datetime(df['DATE'])\ndf = df.set_index('DATE')\nplt.plot(df['PRCP'])\n\n\n\n\n\nIt doesn’t look great for Ben-Gurion airport, lots of missing data! You might need to choose another station… Download data for Beer Sheva, ID IS000051690.\n\n\nShow/hide the code\ndownload_data('BEER_SHEVA', 'IS000051690')\ndf = pd.read_csv('BEER_SHEVA_monthly.csv', sep=\",\")\n# make 'DATE' the dataframe index\ndf['DATE'] = pd.to_datetime(df['DATE'])\ndf = df.set_index('DATE')\nplt.plot(df['PRCP'])\n\n\n\n\n\nThat’s much better! We need to aggregate all data from each month, so we can calculate monthly averages. How to do that?\n\n\nShow/hide the code\n# choose only the precipitation column\ndf_month = df['PRCP']\n# calculate monthly mean\nmonthly_mean = np.array([])  # empty array\nmonth_numbers = np.arange(1,13)\nmonth_names = [month_abbr[i] for i in month_numbers]\n\nfor m in month_numbers:      # cycle over months (1, 2, 3, etc)\n    this_month_all_indices = (df_month.index.month == m)       # indices in df_month belonging to month m\n    this_month_mean = df_month[this_month_all_indices].mean()  # this is the monthly mean\n    monthly_mean = np.append(monthly_mean, this_month_mean)    # append\n\n\nNow it is time to create a new dataframe with the monthly means.\n\n\nShow/hide the code\ndf_beersheva = pd.DataFrame({'monthly rainfall (mm)':monthly_mean,\n                             'month names':month_names,\n                             'month number':month_numbers\n                            })\ndf_beersheva\n\n\n\n\n\n\n  \n    \n      \n      monthly rainfall (mm)\n      month names\n      month number\n    \n  \n  \n    \n      0\n      48.743158\n      Jan\n      1\n    \n    \n      1\n      37.347368\n      Feb\n      2\n    \n    \n      2\n      26.551579\n      Mar\n      3\n    \n    \n      3\n      9.038947\n      Apr\n      4\n    \n    \n      4\n      2.735789\n      May\n      5\n    \n    \n      5\n      0.013830\n      Jun\n      6\n    \n    \n      6\n      0.000000\n      Jul\n      7\n    \n    \n      7\n      0.002128\n      Aug\n      8\n    \n    \n      8\n      0.271277\n      Sep\n      9\n    \n    \n      9\n      6.669474\n      Oct\n      10\n    \n    \n      10\n      21.850526\n      Nov\n      11\n    \n    \n      11\n      41.786316\n      Dec\n      12\n    \n  \n\n\n\n\nPlot the data and see if it makes sense. Try to get a figure like this one.\n\n\nShow/hide the code\nfig, ax = plt.subplots(figsize=(10,7))\nax.bar(df_beersheva['month number'], df_beersheva['monthly rainfall (mm)'])\nax.set(xlabel=\"months\",\n       ylabel=\"monthly average (mm)\",\n       title=\"Beer Sheva\",\n       xticks=df_beersheva['month number'],\n       xticklabels=df_beersheva['month names']);\nplt.savefig(\"hydrology_figures/beersheva_monthly_average.png\")\n\n\n\n\n\nLet’s calculate now the Walsh and Lawler Seasonality Index.\nWrite a function that receives a dataframe like the one we have just created, and returns the seasonality index.\nhttp://leddris.aegean.gr/ses-parameters/293-rainfall-seasonality.html#:~:text=Rainfall%20seasonality%20index%20is%20a,in%20relation%20to%20water%20availability\n\\(R=\\) mean annual precipitation\n\\(m_i\\) precipitation mean for month \\(i\\)\n\\[ SI = \\displaystyle \\frac{1}{R} \\sum_{n=1}^{n=12} \\left| m_i - \\frac{R}{12} \\right| \\]\n\n\n\n\n\n\n\nSI\nPrecipitation Regime\n\n\n\n\n<0.19\nPrecipitation spread throughout the year\n\n\n0.20-0.39\nPrecipitation spread throughout the year, but with a definite wetter season\n\n\n0.40-0.59\nRather seasonal with a short dry season\n\n\n0.60-0.79\nSeasonal\n\n\n0.80-0.99\nMarked seasonal with a long dry season\n\n\n1.00-1.19\nMost precipitation in < 3 months\n\n\n\n\n\nShow/hide the code\ndef walsh_index(df):\n    mi = df[\"monthly rainfall (mm)\"]\n    R = df[\"monthly rainfall (mm)\"].sum()\n    SI = np.sum(np.abs(mi - R/12)) / R\n    return SI\nbeersheva_SI = walsh_index(df_beersheva)\nprint(f\"Beer Sheva, SI = {beersheva_SI:.2f}\")\n\n\nBeer Sheva, SI = 0.97"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-lecture.html",
    "href": "evapotranspiration/evapotranspiration-lecture.html",
    "title": "9  Evapotranspiration",
    "section": "",
    "text": "Dingman, “Physical Hydrology”, chapter 6.\nGlobally, about 62% of the precipitation that falls on the continents is evapotranspirated, amounting to 73 thousand km\\(^3\\)/yr. Of this, about 42% (29 thousand km\\(^3\\)/yr) is transpiration, and about 3% is open-water evaporation. Most of the remainder is interception loss; soil evaporation is a minor component of the total."
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-lecture.html#review-of-methods",
    "href": "evapotranspiration/evapotranspiration-lecture.html#review-of-methods",
    "title": "9  Evapotranspiration",
    "section": "9.1 Review of methods",
    "text": "9.1 Review of methods\nThere are a variety of ways to estimate evaporative flux in nature. The following table categorizes each method based on the data that must be acquired to apply it:\n\nThese methods also vary in the timescales in which they are relevant, typically in correlation with the variety of data needed: - Thornthwaite and SCS Blaney-Criddle: monthly or seasonal estimations (minimal data) - Jensen-Haise: 5-day estimates (good enough timescale and data for irrigation scheduling) - Penman: daily estimates - Penman-Monteith: hourly estimates (requires a lot of data)"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-lecture.html#thornthwaite",
    "href": "evapotranspiration/evapotranspiration-lecture.html#thornthwaite",
    "title": "9  Evapotranspiration",
    "section": "9.2 Thornthwaite",
    "text": "9.2 Thornthwaite\nSource: Ward & Trimble, “Environmental Hydrology”, 2nd Edition, pages 107-108.\nThornthwaite (1948) developed an equation to predict monthly evapotranspiration from mean monthly tempera- ture and latitude data (Equation 4.27). The small amount of data needed is attractive because often ET needs to be predicted for sites where few weather data are available. Based on what we know about ET, we should be skeptical about the general applicability of such a simple equation. Thornthwaite (1948) was not satisfied with the proposed approach: “The mathematical development is far from satisfactory. It is empirical. … The chief obstacle at present to the development of a rational equation is the lack of understanding of why potential ET corresponding to a given temperature is not the same everywhere.”\nTaylor and Ashcroft (1972), as cited in Skaggs (1980), provided insight into the answer to Thornthwaite’s ques- tion. They said:\n> This equation, being based entirely upon a temperature relationship, has the disadvantage of a rather flimsy phys- ical basis and has only weak theoretical justification. Since temperature and vapor pressure gradients are mod- ified by the movement of air and by the heating of the soil and surroundings, the formula is not generally valid, but must be tested empirically whenever the climate is appreciably different from areas in which it has been tested. … In spite of these shortcomings, the method has been widely used. Because it is based entirely on temper- ature data that are available in a large number of localities, it can be applied in situations where the basic data of the Penman method are not available.\nM.E. Jensen et al. (1990) warn that Thornthwaite’s method is generally only applicable to areas that have climates similar to that of the east central U.S., and it is not applicable to arid and semiarid regions.\nThornthwaite (1948) found that evapotranspiration could be predicted from an equation of the form\n\\[\n\\begin{equation}\nE = 16\\left[ \\frac{10\\,T^\\text{monthly mean}}{I} \\right]^a,\n\\end{equation}\n\\] where \\[\n\\begin{equation}\nI = \\sum_{i=1}^{12} \\left[ \\frac{T_i^\\text{monthly mean}}{5} \\right]^{1.514},\n\\end{equation}\n\\] and \\[\n\\begin{align}\na &= 6.75\\times 10^{-7}I^3 \\\\\n   &- 7.71\\times 10^{-5}I^2 \\nonumber\\\\\n   &+ 1.792\\times 10^{-2}I \\nonumber\\\\\n   &+ 0.49239 \\nonumber\n\\end{align}\n\\]\n\n\\(E\\) is the monthly potential ET (mm)\n\\(T_\\text{monthly mean}\\) is the mean monthly temperature in °C\n\\(I\\) is a heat index\n\\(a\\) is a location-dependent coefficient"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-lecture.html#penman",
    "href": "evapotranspiration/evapotranspiration-lecture.html#penman",
    "title": "9  Evapotranspiration",
    "section": "9.3 Penman",
    "text": "9.3 Penman\nSources:\nBrutsaert, “Hydrology: An Introduction”, pages 123-127.\nWard & Trimble, “Environmental Hydrology”, 2nd Edition, subsections 4.5.2, 4.5.3, 4.5.5, 4.6.6.\nAllen et al. (1998), “Crop evapotranspiration - Guidelines for computing crop water requirements - FAO Irrigation and drainage paper 56”\nThe Penman model is almost entirely a theory-based formula for predicting evaporative flux. It can run on a much finer timescale, and requires a much wider variety of data than most models. In addition to temperature, the Penman functions on measurements of radiation, wind speed, elevation above sea level, vapor-pressure deficit, and heat flux density to the ground. The potential ET (in mm d\\(^{-1}\\)) is given by:\n\\[\n\\begin{equation}\nE = \\frac{1}{\\lambda}\\left[ \\frac{\\Delta}{\\Delta+\\gamma}Q_{ne}+ \\frac{\\gamma}{\\Delta+\\gamma}E_A \\right],\n\\end{equation}\n\\]\nwhere \\(Q_n\\) is the available energy flux density\n\\[\n\\begin{equation}\nQ_n = R_n - G,\n\\end{equation}\n\\]\nand \\(E_A\\) is the drying power of the air\n\\[\n\\begin{equation}\nE_A = 6.43\\cdot f(u)\\cdot\\text{VPD}.\n\\end{equation}\n\\]\nThe constituents of the equations above are\n\n\\(E\\): potential evapotranspiration (mm d\\(^{-1}\\))\n\\(\\Delta\\): slope of the saturation water vapor pressure curve (kPa °C\\(^{-1}\\))\n\\(\\gamma\\): psychrometric constant (kPA °C\\(^{-1}\\))\n\\(\\lambda\\): latent heat of vaporization (MJ kg\\(^{-1}\\))\n\\(R_n\\): net radiation (MJ m\\(^{-2} d^{-1}\\))\n\\(G\\): heat flux density to the ground (MJ m\\(^{-2} d^{-1}\\))\n\\(f(u)\\): wind function (dimensionless)\nVPD: vapor pressure deficit (kPa)\n\nand the number 6.43 adjusts the units of \\(E_A\\) so it is in MJ m\\(^{-2} d^{-1}\\). In what follows, we will further discuss these constituents.\n\n9.3.1 Psychrometric Constant\nThe psychrometric constant \\(\\gamma\\) (kPA °C\\(^{-1}\\)) relates the partial pressure of water in air to the air temperature:\n\\[\n  \\begin{equation}\n    \\gamma = \\frac{c_p\\, P}{\\lambda\\cdot MW_\\text{ratio}}\n  \\end{equation}\n\\]\n\\[\n  \\begin{equation}\n    P = 101.3-0.01055 H\n  \\end{equation}\n  \\]\n\\[\n  \\begin{equation}\n    \\lambda = 2.501 - 2.361\\times 10^{-3}\\,T\n  \\end{equation}\n  \\]\n\n\\(MW_\\text{ratio}=0.622\\): ratio molecular weight of water vapor/dry air\n\\(P\\): atmospheric pressure (kPa). Can be either measured or inferred from station height above sea level (m).\n\\(\\lambda\\): latent heat of water vaporization (MJ kg\\(^{-1}\\))\n\\(c_p=0.001013\\): specific heat capacity of moist air (MJ kg\\(^{-1}\\) °C\\(^{-1}\\))\n\n\n\n9.3.2 Net Radiation\nSource: Ward & Trimble, “Environmental Hydrology”, 2nd Edition, page 99.\n\\(R_n\\) (MJ m\\(^{-2} d^{-1}\\)) is net radiation, the balance between net short wave \\(R_s\\) and the long wave \\(R_b\\) components of the radiation:\n\\[R_n = (1-\\alpha)R_s\\!\\! \\downarrow -R_b \\!\\! \\uparrow,\\]\nwhere \\(\\alpha\\) (dimensionless) is the albedo. The net outgoing thermal radiation \\(R_b\\) is given by\n\\[R_b = \\left( a\\frac{R_s}{R_{so}+b} \\right)R_{bo},\\]\nwhere \\(R_{so}\\) is the solar radiation on a cloudless day, and it depends on latitude and day of the year. \\(R_{bo}\\) is given by\n\\[R_{bo} = \\epsilon\\, \\sigma\\, T^4_{Kelvin},\\]\nwhere \\(\\sigma=4.903\\times 10^{-9}\\) MJ m\\(^{-2}\\) d\\(^{-1}\\) K\\(^{-4}\\), and \\(\\epsilon\\) is net net emissivity:\n\\[\\epsilon=-0.02+0.261 \\exp\\left(-7.77\\times10^{-4}T_{Celcius}^2\\right).\\]\nThe parameters \\(a\\) and \\(b\\) are determined for the climate of the area:\n\n\\(a=1.0\\), \\(b=0.0\\) for humid areas,\n\\(a=1.2\\), \\(b=-0.2\\) for arid areas,\n\\(a=1.1\\), \\(b=-0.1\\) for semihumid areas.\n\nWe can find below a table for \\(R_{so}\\), from Ward & Trimble, “Environmental Hydrology”, 2nd Edition, page 100. \n\n\n9.3.3 Heat Flux Density to the Ground\nThe heat flux density to the ground \\(G\\) (MJ m\\(^{-2} d^{-1}\\)) can be calculated using\n\\[\n  \\begin{equation}\n    G = 4.2\\frac{T_{i+1}-T_{i-1}}{\\Delta t},\n  \\end{equation}\n\\]\nwhere \\(\\Delta t\\) is the time in days between midpoints of time periods \\(i+1\\) and \\(i−1\\), and \\(T\\) is the air temperature (°C).\nThis expression is really a finite differences implementation of a time derivative:\n\\[\n\\displaystyle \\frac{\\text{d}T}{\\text{d}t} = \\lim_{\\Delta t\\rightarrow 0}\\frac{T(t+\\Delta t) - T(t-\\Delta t)}{2\\Delta t}.\n\\]\nLater on, we will take advantage of numpy’s gradient function to calculate \\(G\\).\n\n\n9.3.4 Vapor Pressure\nfrom: Ward & Trimble, “Environmental Hydrology”, 2nd Edition, page 95.\nThe Vapor Pressure Deficit (VPD, in kPa) is the difference between saturation vapor pressure \\(e_s\\) and actual vapor pressure \\(e_d\\):\n\\[\\text{VPD} = e_s - e_d.\\]\nFor temperatures ranging from 0 to 50 °C, the saturation vapor pressure can be calculated with\n\\[\n  \\begin{equation}\n    e_s = \\exp \\left[ \\frac{16.78\\, T -116.9}{T+237.3} \\right],\n  \\end{equation}\n\\]\nand the actual vapor pressure is given by\n\\[\n  \\begin{equation}\n    e_d = e_s \\frac{RH}{100},\n  \\end{equation}\n\\]\nwhere \\(RH\\) is the relative humidity (%), and the temperature \\(T\\) in the equations above is in degrees Celcius.\nWe can see below a graph of \\(e_s(T)\\) (Ward & Trimble, “Environmental Hydrology”, 2nd Edition, page 96)\n\nThe factor \\(\\Delta\\) is the slope of \\(e_s(T)\\). See the figure below from Brutsaert, where the saturation vapor pressure is called \\(e^*\\) (Brutsaert, “Hydrology: An Introduction”, page 28)):\n\nThere are a few ways of defining the function for \\(\\Delta(T)\\) (kPa °C\\(^{-1}\\)). Ward & Trimble give the following:\n\\[\n  \\begin{equation}\n    \\Delta = 0.200 \\cdot (0.00738\\,T + 0.8072)^7 - 0.000116,\n  \\end{equation}\n\\]\nwhile differentiating the exponential expression given before yields:\n\\[\n  \\begin{equation}\n    \\Delta = \\frac{\\text{d} e_s}{\\text{d}T} = e_s(T)\\cdot \\frac{4098.79}{(T+237.3)^2}.\n  \\end{equation}\n\\]\n\n\n9.3.5 Wind Function\nSource: (Ward & Trimble, “Environmental Hydrology”, 2nd Edition, page 108)\n\\[\n  \\begin{equation}\n    f(u) = 0.26(1.0 + 0.54\\, u_2)\n  \\end{equation}\n\\]"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-lecture.html#pitfalls",
    "href": "evapotranspiration/evapotranspiration-lecture.html#pitfalls",
    "title": "9  Evapotranspiration",
    "section": "10.1 Pitfalls",
    "text": "10.1 Pitfalls\nDifferent books and papers will present slightly different versions of the Penman equation. Basically, they differ in the units they use for the various components, and one should be vary aware of what inputs any given equation is expecting to get."
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html",
    "href": "evapotranspiration/evapotranspiration-exercises.html",
    "title": "10  Exercises",
    "section": "",
    "text": "We will calculate the evapotranspiration using two methods: Thornthwaite and Penman."
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html#download-data-from-the-ims",
    "href": "evapotranspiration/evapotranspiration-exercises.html#download-data-from-the-ims",
    "title": "10  Exercises",
    "section": "10.1 Download data from the IMS",
    "text": "10.1 Download data from the IMS\nGo to the Israel Meteorological Service website, and download the following data:\n\nhourly data\n\n\non the first page, choose all options and press continue.\non the next page, choose the following date range: 01/01/2020 to 01/01/2021, then press continue.\nChoose station Bet Dagan (בית דגן 2523), then select (בחר), then continue.\nChoose option “by station” (לפי תחנות), then produce report.\nDownload report as csv, call it “bet-dagan-3h.csv”.\n\n\ndaily data\n\n\non the first page, choose all options and press continue.\non the next page, choose the following date range: 01/01/2020 to 01/01/2021, then press continue.\nChoose station Bet Dagan Meuyeshet (בית דגן מאוישת 2520), then select (בחר), then continue.\nChoose option “by station” (לפי תחנות), then produce report.\nDownload report as csv, call it “bet-dagan-day-pan.csv”.\n\n\nradiation data\n\n\non the first page, choose all options, then on the bottom right option “radiation” (קרינה), choose kJ/m2, and then press continue.\non the next page, choose the following date range: 01/01/2020 to 01/01/2021, then press continue.\nChoose station Bet Dagan Krina (בית דגן קרינה 2524), then select (בחר), then continue.\nChoose option “by station” (לפי תחנות), then produce report.\nDownload report as csv, call it “bet-dagan-radiation.csv”."
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html#import-relevant-packages",
    "href": "evapotranspiration/evapotranspiration-exercises.html#import-relevant-packages",
    "title": "10  Exercises",
    "section": "10.2 Import relevant packages",
    "text": "10.2 Import relevant packages\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\nimport pandas as pd\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()  # datetime converter for a matplotlib\nimport seaborn as sns\nsns.set(style=\"ticks\", font_scale=1.5)"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html#import-hourly-data",
    "href": "evapotranspiration/evapotranspiration-exercises.html#import-hourly-data",
    "title": "10  Exercises",
    "section": "10.3 import hourly data",
    "text": "10.3 import hourly data\n\ndf = pd.read_csv('bet-dagan-3h.csv', encoding = 'unicode_escape', na_values=[\"-\"])\n# find out what hebrew gibberish means: http://www.pixiesoft.com/flip/\nname_conversion_dictionary = {\"ùí úçðä\": \"station name\",\n                              \"îñôø úçðä\": \"station number\",\n                              \"úàøéê\": \"Date\",\n                              \"ùòä-LST\": \"LST time\",\n                              \"èîôøèåøä(C°)\": \"T\",\n                              \"èîôøèåøä ìçä(C°)\": \"wet-bulb temperature (°C)\",\n                              \"èîôøèåøú ð÷åãú äèì(C°)\": \"dew_point_T\",\n                              \"ìçåú éçñéú(%)\": \"relative humidity (%)\",\n                              \"îäéøåú äøåç(m/s)\": \"wind_speed\",\n                              \"ëéååï äøåç(îòìåú)\": \"wind direction (degrees)\",\n                              \"ìçõ áâåáä äúçðä(hPa)\": \"Pressure\",\n                              \"ìçõ áâåáä ôðé äéí(hPa)\": \"pressure at sea level (hPa)\",\n                              \"\"\"äúàãåú éåîéú îâéâéú ñåâ à'(î\"î)\"\"\": \"pan evaporation (mm)\",\n                              \"ñåâ ÷øéðä()\": \"radiation type\",\n                             }\n# units\n# T = temperature (°C)\n# dew_point_T = dew point temperature (°C)\n# wind_speed = wind speed (m/s)\n# Pressure = pressure at station height (hPa = 0.1 kPa)\n\ndf = df.rename(columns=name_conversion_dictionary)\ndf['timestamp'] = df['Date'] + ' ' + df['LST time']\ndf['timestamp'] = pd.to_datetime(df['timestamp'], dayfirst=True)\ndf = df.set_index('timestamp')\ndf\n\n\n\n\n\n  \n    \n      \n      station name\n      station number\n      Date\n      LST time\n      T\n      wet-bulb temperature (°C)\n      dew_point_T\n      relative humidity (%)\n      wind_speed\n      wind direction (degrees)\n      ...\n      pressure at sea level (hPa)\n      ëîåú òððéí ëåììú(÷åã)\n      ëîåú òððéí ðîåëéí(÷åã)\n      âåáä áñéñ òððéí ðîåëéí(÷åã)\n      ñåâ äòððéí äðîåëéí(÷åã)\n      ñåâ äòððéí äáéðåðééí(÷åã)\n      ñåâ äòððéí äâáåäéí(÷åã)\n      îæâ àååéø ðåëçé(÷åã)\n      îæâ àååéø ùçìó(÷åã)\n      øàåú àô÷éú(÷åã)\n    \n    \n      timestamp\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-01 02:00:00\n      áéú ãâï                                       ...\n      2523\n      01-01-2020\n      02:00\n      7.9\n      7.2\n      6.4\n      90\n      1.7\n      117.0\n      ...\n      1018.8\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-01-01 05:00:00\n      áéú ãâï                                       ...\n      2523\n      01-01-2020\n      05:00\n      7.5\n      7.0\n      6.4\n      93\n      1.2\n      116.0\n      ...\n      1018.1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-01-01 08:00:00\n      áéú ãâï                                       ...\n      2523\n      01-01-2020\n      08:00\n      8.6\n      8.3\n      8.0\n      96\n      1.1\n      107.0\n      ...\n      1018.2\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-01-01 11:00:00\n      áéú ãâï                                       ...\n      2523\n      01-01-2020\n      11:00\n      15.9\n      13.1\n      10.6\n      71\n      2.4\n      196.0\n      ...\n      1017.4\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-01-01 14:00:00\n      áéú ãâï                                       ...\n      2523\n      01-01-2020\n      14:00\n      18.1\n      14.0\n      10.4\n      61\n      2.8\n      264.0\n      ...\n      1015.3\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-01-31 11:00:00\n      áéú ãâï                                       ...\n      2523\n      31-01-2021\n      11:00\n      19.0\n      13.7\n      8.9\n      52\n      5.6\n      235.0\n      ...\n      1017.3\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2021-01-31 14:00:00\n      áéú ãâï                                       ...\n      2523\n      31-01-2021\n      14:00\n      19.2\n      14.7\n      11.0\n      59\n      4.6\n      252.0\n      ...\n      1016.7\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2021-01-31 17:00:00\n      áéú ãâï                                       ...\n      2523\n      31-01-2021\n      17:00\n      18.2\n      14.8\n      12.2\n      68\n      0.8\n      203.0\n      ...\n      1017.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2021-01-31 20:00:00\n      áéú ãâï                                       ...\n      2523\n      31-01-2021\n      20:00\n      13.1\n      12.3\n      11.7\n      91\n      1.2\n      79.0\n      ...\n      1018.2\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2021-01-31 23:00:00\n      áéú ãâï                                       ...\n      2523\n      31-01-2021\n      23:00\n      10.8\n      10.6\n      10.3\n      97\n      1.7\n      111.0\n      ...\n      1018.9\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n3172 rows × 21 columns"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html#import-daily-data-with-pan-evaporation",
    "href": "evapotranspiration/evapotranspiration-exercises.html#import-daily-data-with-pan-evaporation",
    "title": "10  Exercises",
    "section": "10.4 import daily data with pan evaporation",
    "text": "10.4 import daily data with pan evaporation\n\ndf2 = pd.read_csv('bet-dagan-day-pan.csv', encoding = 'unicode_escape', na_values=[\"-\"])\ndf2 = df2.rename(columns=name_conversion_dictionary)\ndf2['Date'] = pd.to_datetime(df2['Date'], dayfirst=True)\ndf2 = df2.set_index('Date')\ndf2\n\n\n\n\n\n  \n    \n      \n      station name\n      station number\n      èîôøèåøú î÷ñéîåí(C°)\n      èîôøèåøú îéðéîåí(C°)\n      èîôøèåøú îéðéîåí ìéã ä÷ø÷ò(C°)\n      îùê æäéøú ùîù(ã÷åú)\n      pan evaporation (mm)\n      ÷åã äúàãåú éåîéú()\n    \n    \n      Date\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-01\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      0.8\n      0.0\n    \n    \n      2020-01-02\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-01-03\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-01-04\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2020-01-05\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      2.4\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-01-27\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      2.5\n      0.0\n    \n    \n      2021-01-28\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      1.2\n      0.0\n    \n    \n      2021-01-29\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2021-01-30\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2021-01-31\n      áéú ãâï îàåéùú                                ...\n      2520\n      NaN\n      NaN\n      NaN\n      NaN\n      2.6\n      0.0\n    \n  \n\n397 rows × 8 columns"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html#import-daily-data-with-radiation",
    "href": "evapotranspiration/evapotranspiration-exercises.html#import-daily-data-with-radiation",
    "title": "10  Exercises",
    "section": "10.5 import daily data with radiation",
    "text": "10.5 import daily data with radiation\n\ndf3 = pd.read_csv('bet-dagan-radiation.csv', encoding = 'unicode_escape', na_values=[\"-\"])\ndf3 = df3.rename(columns=name_conversion_dictionary)\ndf3['Date'] = pd.to_datetime(df3['Date'], dayfirst=True)\ndf3 = df3.set_index('Date')\ndf3 = df3.replace({\"éùéøä\": \"direct\",\n                   \"îôåæøú\": \"diffuse\",\n                   \"âìåáàìéú\": \"global\"})\ndf3['daily_radiation_MJ_per_m2_per_day'] = df3.iloc[:, 3:].sum(axis=1)/1000\ndf_radiation = df3.loc[df3[\"radiation type\"] == \"global\", \"daily_radiation_MJ_per_m2_per_day\"].to_frame()\ndf_radiation\n\n\n\n\n\n  \n    \n      \n      daily_radiation_MJ_per_m2_per_day\n    \n    \n      Date\n      \n    \n  \n  \n    \n      2020-01-01\n      10.0296\n    \n    \n      2020-01-02\n      4.3128\n    \n    \n      2020-01-03\n      11.6748\n    \n    \n      2020-01-04\n      1.6452\n    \n    \n      2020-01-05\n      6.8544\n    \n    \n      ...\n      ...\n    \n    \n      2021-01-27\n      12.2652\n    \n    \n      2021-01-28\n      7.1640\n    \n    \n      2021-01-29\n      7.2936\n    \n    \n      2021-01-30\n      9.3276\n    \n    \n      2021-01-31\n      13.5468\n    \n  \n\n396 rows × 1 columns"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html#part-1-thornthwaite-estimation",
    "href": "evapotranspiration/evapotranspiration-exercises.html#part-1-thornthwaite-estimation",
    "title": "10  Exercises",
    "section": "10.6 Part 1: Thornthwaite estimation",
    "text": "10.6 Part 1: Thornthwaite estimation\n\\[\nE = 16\\left[ \\frac{10\\,T^\\text{monthly mean}}{I} \\right]^a,\n\\]\nwhere\n\\[\nI = \\sum_{i=1}^{12} \\left[ \\frac{T_i^\\text{monthly mean}}{5} \\right]^{1.514},\n\\]\nand\n\\[\n\\begin{align}\na &= 6.75\\times 10^{-7}I^3 \\\\\n   &- 7.71\\times 10^{-5}I^2 \\nonumber\\\\\n   &+ 1.792\\times 10^{-2}I \\nonumber\\\\\n   &+ 0.49239 \\nonumber\n\\end{align}\n\\]\n\n\\(E\\) is the monthly potential ET (mm)\n\\(T_\\text{monthly mean}\\) is the mean monthly temperature in °C\n\\(I\\) is a heat index\n\\(a\\) is a location-dependent coefficient\n\nFrom df, make a new dataframe, df_th, that stores monthly temperatures means. Use resample function.\n\n# monthly data\ndf_th = (df['T'].resample('MS')  # MS assigns mean to first day in the month\n                .mean()\n                .to_frame()\n        )\n# we now add 14 days to the index, so that all monthly data is in the middle of the month\n# not really necessary, makes plot look better\ndf_th.index = df_th.index + pd.DateOffset(days=14)\ndf_th\n\n\n\n\n\n  \n    \n      \n      T\n    \n    \n      timestamp\n      \n    \n  \n  \n    \n      2020-01-15\n      12.484274\n    \n    \n      2020-02-15\n      14.046983\n    \n    \n      2020-03-15\n      16.439113\n    \n    \n      2020-04-15\n      18.512500\n    \n    \n      2020-05-15\n      23.166532\n    \n    \n      2020-06-15\n      24.600000\n    \n    \n      2020-07-15\n      27.353226\n    \n    \n      2020-08-15\n      28.090323\n    \n    \n      2020-09-15\n      28.462500\n    \n    \n      2020-10-15\n      25.120161\n    \n    \n      2020-11-15\n      19.308475\n    \n    \n      2020-12-15\n      15.916129\n    \n    \n      2021-01-15\n      14.123790\n    \n  \n\n\n\n\nCalculate \\(I\\), then \\(a\\), and finally \\(E_p\\). Add \\(E_p\\) as a new column in df_th.\n\n# Preparing \"I\" for the Thornthwaite equation\nI = np.sum( (df_th['T']/5)**(1.514) )\n\n# Preparing \"a\" for the Thornthwaite equation\na = (+6.75e-7 * I**3 \n     -7.71e-5 * I**2\n     +1.792e-2 * I\n     + 0.49239)\n\n# The final Thornthwaite model for monthly potential ET (mm)\ndf_th['Ep'] = 16*((10*df_th['T']/I)**a)\ndf_th\n\n\n\n\n\n  \n    \n      \n      T\n      Ep\n    \n    \n      timestamp\n      \n      \n    \n  \n  \n    \n      2020-01-15\n      12.484274\n      20.163427\n    \n    \n      2020-02-15\n      14.046983\n      27.179636\n    \n    \n      2020-03-15\n      16.439113\n      40.472053\n    \n    \n      2020-04-15\n      18.512500\n      54.671821\n    \n    \n      2020-05-15\n      23.166532\n      96.461219\n    \n    \n      2020-06-15\n      24.600000\n      112.296873\n    \n    \n      2020-07-15\n      27.353226\n      146.898516\n    \n    \n      2020-08-15\n      28.090323\n      157.128632\n    \n    \n      2020-09-15\n      28.462500\n      162.453109\n    \n    \n      2020-10-15\n      25.120161\n      118.406386\n    \n    \n      2020-11-15\n      19.308475\n      60.820862\n    \n    \n      2020-12-15\n      15.916129\n      37.291178\n    \n    \n      2021-01-15\n      14.123790\n      27.557481\n    \n  \n\n\n\n\nPlot the Thornthwaite ET that you calculated.\n\nfig, ax = plt.subplots(1, figsize=(10,7))\nax.plot(df_th['Ep'])\nax.set(xlabel=\"date\",\n       ylabel=r\"$E_p$ (mm)\",\n       title=\"Thornthwaite potential evapotranspiration\");"
  },
  {
    "objectID": "evapotranspiration/evapotranspiration-exercises.html#part-2-penman",
    "href": "evapotranspiration/evapotranspiration-exercises.html#part-2-penman",
    "title": "10  Exercises",
    "section": "10.7 Part 2: Penman",
    "text": "10.7 Part 2: Penman\nThe Penman model is almost entirely a theory based formula for predicting evaporative flux. It can run on a much finer timescale, and requires a much wider variety of data than most models. In addition to temperature, the Penman functions on measurements of radiation, wind speed, elevation above sea level, vapour-pressure deficit, and heat flux density to the ground.\n\\[\nE = \\frac{1}{\\lambda}\\left[ \\frac{\\Delta}{\\Delta+\\gamma}Q_{ne}+ \\frac{\\gamma}{\\Delta+\\gamma}E_A \\right],\n\\]\nwhere \\(Q_n\\) is the available energy flux density\n\\[\nQ_n = R_n - G,\n\\]\nand \\(E_A\\) is the drying power of the air\n\\[\nE_A = 6.43\\cdot f(u)\\cdot\\text{VPD}.\n\\]\n\\[\n\\gamma = \\frac{c_p\\, P}{\\lambda\\cdot MW_\\text{ratio}}\n\\]\n\\[\nP = 101.3-0.01055 H\n\\]\n\\[\n\\lambda = 2.501 - 2.361\\times 10^{-3}\\,T\n\\]\n\n\\(MW_\\text{ratio}=0.622\\): ratio molecular weight of water vapor/dry air\n\\(P\\): atmospheric pressure (kPa). Can be either measured or inferred from station height above sea level (m).\n\\(\\lambda\\): latent heat of water vaporization (MJ kg\\(^{-1}\\))\n\n\\[\nR_n = (1-\\alpha)R_s\\!\\! \\downarrow -R_b \\!\\! \\uparrow,\n\\]\nwhere \\(\\alpha\\) (dimensionless) is the albedo. The net outgoing thermal radiation \\(R_b\\) is given by\n\\[\nR_b = \\left( a\\frac{R_s}{R_{so}+b} \\right)R_{bo},\n\\]\nwhere \\(R_{so}\\) is the solar radiation on a cloudless day, and it depends on latitude and day of the year. \\(R_{bo}\\) is given by\n\\[\nR_{bo} = \\epsilon\\, \\sigma\\, T^4_{Kelvin},\n\\]\nwhere \\(\\sigma=4.903\\times 10^{-9}\\) MJ m\\(^{-2}\\) d\\(^{-1}\\) K\\(^{-4}\\), and \\(\\epsilon\\) is net net emissivity:\n\\[\n\\epsilon=-0.02+0.261 \\exp\\left(-7.77\\times10^{-4}T_{Celcius}^2\\right).\n\\]\nThe parameters \\(a\\) and \\(b\\) are determined for the climate of the area:\n\n\\(a=1.0\\), \\(b=0.0\\) for humid areas,\n\\(a=1.2\\), \\(b=-0.2\\) for arid areas,\n\\(a=1.1\\), \\(b=-0.1\\) for semihumid areas.\n\n\\[\nG = 4.2\\frac{T_{i+1}-T_{i-1}}{\\Delta t}\n\\]\n\\[\n\\text{VPD} = e_s - e_d.\n\\]\nFor temperatures ranging from 0 to 50 °C, the saturation vapor pressure can be calculated with\n\\[\ne_s = \\exp \\left[ \\frac{16.78\\, T -116.9}{T+237.3} \\right],\n\\]\nand the actual vapor pressure is given by\n\\[\ne_d = e_s \\frac{RH}{100},\n\\]\n\\[\n\\Delta = \\frac{\\text{d} e_s}{\\text{d}T} = e_s(T)\\cdot \\frac{4098.79}{(T+237.3)^2}.\n\\]\n\\[\nf(u) = 0.26(1.0 + 0.54\\, u_2)\n\\]\nThe various components of the equations above are:\n\\[\n    \\Delta = 0.200 \\cdot (0.00738\\,T + 0.8072)^7 - 0.000116\n  \\]\n\\[\n    \\gamma = \\frac{c_p\\, P}{0.622 \\lambda}\n  \\]\n\\[\n    P = 101.3-0.01055 H\n  \\]\n\\[\n    \\lambda = 2.501 - 2.361\\times 10^{-3}\\,T\n  \\]\n\\[\n    f_e(u) = 1.0 + 0.53\\, u_2\n  \\]\n\\[\n    G = 4.2\\frac{T_{i+1}-T_{i-1}}{\\Delta t}\n  \\]\n\\[\n    e_s = \\exp \\left[ \\frac{16.78\\, T -116.9}{T+237.3} \\right]\n  \\]\n\\[\n    e_d = e_s \\frac{RH}{100}\n  \\] where \\(\\Delta t\\) is the time in days between midpoints of time periods \\(i+1\\) and \\(i−1\\), and \\(T\\) is the air temperature (°C).\n\n\\(\\Delta\\): slope of the saturation water vapor pressure curve (kPa °C\\(^{-1}\\))\n\\(\\gamma\\): psychrometric constant (kPA °C\\(^{-1}\\))\n\\(c_p=0.001013\\): specific heat of water at constant pressure (MJ kg\\(^{-1}\\) °C\\(^{-1}\\))\n\\(P\\): atmospheric pressure (kPa)\n\\(H\\): elevation above sea level (m)\n\\(\\lambda\\): latent heat of vaporization (MJ kg\\(^{-1}\\))\n\\(R_n\\): net radiation (MJ m\\(^{-2} d^{-1}\\))\n\\(G\\): heat flux density to the ground (MJ m\\(^{-2} d^{-1}\\))\n\\(u_{2}\\): wind speed measured 2 m above ground (m s\\(^{-1}\\))\n\\(e_{s} - e_{d}\\): vapor pressure deficit (kPa)\n\\(e_{s}\\): saturation vapor pressure (kPa)\n\\(e_{d}\\): actual vapor pressure (kPa)\n\nCalculate daily means for the following columns: temperature T, wind speed wind_speed, atmospheric pressure Pressure, and relative humidity relative humidity (%). Remember that pressure data was given in hectopascal, 1 hPa = 0.1 kPa. Store all the calculated values in a new dataframe, called df_pen.\n\n# Resampling hourly data over same day and taking mean, to obtain daily averages\ndf_pen = (df['T'].resample('D')\n                 .mean()\n                 .to_frame()\n         )\ndf_pen['dew_point'] = (df['dew_point_T'].resample('D')\n                                        .mean()\n                      )\ndf_pen['u'] = (df['wind_speed'].resample('D')\n                               .mean()\n              )\ndf_pen['P'] = (df['Pressure'].resample('D')\n                             .mean()\n              )/10\ndf_pen['RH'] = (df['relative humidity (%)'].resample('D')\n                                           .mean()\n               )\ndf_pen\n\n\n\n\n\n  \n    \n      \n      T\n      dew_point\n      u\n      P\n      RH\n    \n    \n      timestamp\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-01\n      12.3625\n      9.0625\n      1.5250\n      101.30875\n      81.500\n    \n    \n      2020-01-02\n      11.9750\n      9.8250\n      1.9250\n      101.20125\n      87.000\n    \n    \n      2020-01-03\n      13.0500\n      4.9750\n      5.1750\n      101.37125\n      58.500\n    \n    \n      2020-01-04\n      10.8625\n      6.6875\n      5.5625\n      101.15500\n      78.375\n    \n    \n      2020-01-05\n      12.9375\n      9.2125\n      4.5625\n      101.23625\n      79.125\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-01-27\n      13.8125\n      8.2375\n      1.8875\n      100.83750\n      72.375\n    \n    \n      2021-01-28\n      14.4000\n      10.2250\n      3.5250\n      101.12750\n      76.750\n    \n    \n      2021-01-29\n      12.3500\n      7.9125\n      5.0250\n      101.22125\n      75.250\n    \n    \n      2021-01-30\n      12.9625\n      7.6500\n      4.4250\n      101.49500\n      71.375\n    \n    \n      2021-01-31\n      15.0625\n      8.3125\n      3.7500\n      101.32500\n      66.000\n    \n  \n\n397 rows × 5 columns\n\n\n\nWith average \\(T\\) for every day of the year, we can now calculate daily latent heat of vaporization \\(\\lambda\\), the slope of the saturation-vapor pressure-temperature curve \\(\\Delta\\), and the heat flux density to the ground \\(G\\). Add each of these to dataframe df_pen.\nCalculate also the wind function using the data for wind speed, and add this to df_pen.\n\ndef lambda_latent_heat(T):\n    \"\"\"daily latent heat of vaporization (MJ/kg)\"\"\"\n    return 2.501 - 2.361e-3*T\n\ndef Delta(T):\n    \"\"\"slope of saturation-vapor curve (kPa/°C)\"\"\"\n    return 0.2000*(0.00738*T + 0.8072)**7 - 0.000116\n\ndef G(T):\n    \"\"\"heat flux density to the ground, G (MJ/m2/d)\"\"\"\n    return 4.2*np.gradient(T.values)\n\ncp = 0.001013  # (MJ kg−1 °C−1) \ndf_pen['lambda'] = lambda_latent_heat(df_pen['T'])\ndf_pen['Delta'] = Delta(df_pen['T'])\ndf_pen['G'] = G(df_pen['T'])\ndf_pen['gamma'] = (cp*df_pen['P'])/(0.622*df_pen['lambda'])\ndf_pen['f_wind'] = 1.0 + 0.53 * df_pen['u']\ndf_pen\n\n\n\n\n\n  \n    \n      \n      T\n      dew_point\n      u\n      P\n      RH\n      lambda\n      Delta\n      G\n      gamma\n      f_wind\n    \n    \n      timestamp\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-01\n      12.3625\n      9.0625\n      1.5250\n      101.30875\n      81.500\n      2.471812\n      0.094385\n      -1.62750\n      0.066750\n      1.808250\n    \n    \n      2020-01-02\n      11.9750\n      9.8250\n      1.9250\n      101.20125\n      87.000\n      2.472727\n      0.092300\n      1.44375\n      0.066654\n      2.020250\n    \n    \n      2020-01-03\n      13.0500\n      4.9750\n      5.1750\n      101.37125\n      58.500\n      2.470189\n      0.098185\n      -2.33625\n      0.066835\n      3.742750\n    \n    \n      2020-01-04\n      10.8625\n      6.6875\n      5.5625\n      101.15500\n      78.375\n      2.475354\n      0.086530\n      -0.23625\n      0.066553\n      3.948125\n    \n    \n      2020-01-05\n      12.9375\n      9.2125\n      4.5625\n      101.23625\n      79.125\n      2.470455\n      0.097554\n      4.25250\n      0.066739\n      3.418125\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-01-27\n      13.8125\n      8.2375\n      1.8875\n      100.83750\n      72.375\n      2.468389\n      0.102551\n      4.77750\n      0.066532\n      2.000375\n    \n    \n      2021-01-28\n      14.4000\n      10.2250\n      3.5250\n      101.12750\n      76.750\n      2.467002\n      0.106028\n      -3.07125\n      0.066760\n      2.868250\n    \n    \n      2021-01-29\n      12.3500\n      7.9125\n      5.0250\n      101.22125\n      75.250\n      2.471842\n      0.094317\n      -3.01875\n      0.066691\n      3.663250\n    \n    \n      2021-01-30\n      12.9625\n      7.6500\n      4.4250\n      101.49500\n      71.375\n      2.470396\n      0.097694\n      5.69625\n      0.066911\n      3.345250\n    \n    \n      2021-01-31\n      15.0625\n      8.3125\n      3.7500\n      101.32500\n      66.000\n      2.465437\n      0.110070\n      8.82000\n      0.066933\n      2.987500\n    \n  \n\n397 rows × 10 columns\n\n\n\nIt’s time to calculate net radiation \\(R_n\\). The monthly mean solar radiation \\(R_{so}\\) for latitude 30 degrees is\n[17.46, 21.65, 25.96, 29.85,  \n 32.11, 33.20, 32.66, 30.44,  \n 26.67, 22.48, 18.30, 16.04]\n(MJ m\\(^{-2}\\) d\\(^{-1}\\))\n(Israel’s latitude is ~ 31 degrees).\n\nAdd a new column Rso_monthly to df_pen, where each day has the appropriate \\(R_{so}\\) given by the data above.\nAdd a new columns Rs with the global radiation data imported in the 3rd file.\n\n\n# Rso: mean solar radiation from a cloudless sky (based on latitude)\n# MJ/m2/d\nRso_monthly = np.array([17.46, 21.65, 25.96, 29.85,\n                        32.11, 33.20, 32.66, 30.44,\n                        26.67, 22.48, 18.30, 16.04])\n  \n# create empty columns\ndf_pen[\"Rso_monthly\"] = \"\"\n\n# every day in the month will have the same values for Rso\nfor i in range(12):\n    df_pen.loc[df_pen.index.month==(i+1), \"Rso_monthly\"] = Rso_monthly[i]\n\ndf_pen[\"Rs\"] = df_radiation[\"daily_radiation_MJ_per_m2_per_day\"]\n\nfig, ax = plt.subplots(1, figsize=(10,7))\nax.plot(df_pen['Rso_monthly'])\nplt.gcf().autofmt_xdate()\nax.set_ylabel(r\"$R_{so}$ (MJ m$^{-2} d^{-1}$)\")\n\nText(0, 0.5, '$R_{so}$ (MJ m$^{-2} d^{-1}$)')\n\n\n\n\n\n\nmiddle = pd.date_range(start='1/1/2020', periods=13, freq='MS') + pd.DateOffset(days=14)\nnew = df_pen.loc[middle, 'Rso_monthly'].astype('float')\nnew\ndf_i = (pd.DataFrame(data=new, index=new.index) #create the dataframe\n           .resample(\"D\") #resample daily\n           .interpolate(method='time') #interpolate by time\n       )\n\nfig, ax = plt.subplots(1, figsize=(10,7))\nax.plot(df_i, 'o')\nax.plot(df_pen['Rso_monthly'])\nplt.gcf().autofmt_xdate()\nax.set_title(\"time interpolation\")\nax.set_ylabel(r\"$R_{so}$ (MJ m$^{-2} d^{-1}$)\")\n\nText(0, 0.5, '$R_{so}$ (MJ m$^{-2} d^{-1}$)')\n\n\n\n\n\nfrom: Ward & Trimble, “Environmental Hydrology”, 2nd Edition, page 99.\n\nCalculate \\[\nR_{bo} = \\epsilon\\, \\sigma\\, T^4_{Kelvin},\n\\] where \\[\n\\epsilon=-0.02+0.261 \\exp\\left(-7.77\\times10^{-4}T_{Celcius}^2\\right),\n\\]\n\\[\n\\sigma=4.903\\times 10^{-9} \\text{  MJ m$^{-2}$ d$^{-1}$ K$^{-4}$},\n\\] and \\[\nT_{Kelvin}=T_{Celcius}+273.15\n\\]\nCalculate \\[\nR_b = \\left( a\\frac{R_s}{R_{so}+b} \\right)R_{bo},\n\\] where\n\nfor humid areas, \\(a=1.0\\) and \\(b=0\\),\n\nfor arid areas, \\(a=1.2\\) and \\(b=-0.2\\),\n\nfor semihumid areas, \\(a=1.1\\) and \\(b=-0.1\\)\n\nFinally, calculate \\[\nR_n = (1-\\alpha)R_s\\!\\! \\downarrow -R_b \\!\\! \\uparrow,\n\\] where\n\n\\(\\alpha= 0.23\\) for most green crops with a full cover\n\\(\\alpha= 0.04\\) for fresh asphalt\n\\(\\alpha= 0.12\\) for worn-out asphalt\n\\(\\alpha= 0.55\\) for fresh concrete\n\n\nAdd a new column Rn to df_pen dataframe.\n\n# Stefan-Boltzmann constant\nsigma = 4.903e-9\nemissivity = -0.02 + 0.261 * np.exp(-7.77e-4 * df_pen['T']**2)\n\n# Rbo: net longwave radiation for clear skies, otherwise known as diffuse radiation or emitted radiation from the\n# atmosphere - 'how hot is it?'\nRbo = emissivity*sigma*((df_pen['T']+273.15)**4)\n\n# net outgoing long-wave radiation (note: Rs/Rso = proportion of how clear the day is)\n# for humid areas, a=1.0 and b=0\n# for arid areas, a=1.2 and b=-0.2\n# for semihumid areas, a=1.1 and b=-0.1\na = 1.2\nb = -0.2\nRb = (a*df_pen['Rs']/df_pen['Rso_monthly'] + b)*Rbo   \n\n# α is the albedo, or short-wave reflectance (dimensionless)\nalpha = 0.23\n\n# net radiation\nRn = (1 - alpha) * df_pen['Rs'] - Rb   # (MJ/m2/d)\ndf_pen['Rn'] = Rn\ndf_pen\n\n\n\n\n\n  \n    \n      \n      T\n      dew_point\n      u\n      P\n      RH\n      lambda\n      Delta\n      G\n      gamma\n      f_wind\n      Rso_monthly\n      Rs\n      Rn\n    \n    \n      timestamp\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-01\n      12.3625\n      9.0625\n      1.5250\n      101.30875\n      81.500\n      2.471812\n      0.094385\n      -1.62750\n      0.066750\n      1.808250\n      17.46\n      10.0296\n      4.346568\n    \n    \n      2020-01-02\n      11.9750\n      9.8250\n      1.9250\n      101.20125\n      87.000\n      2.472727\n      0.092300\n      1.44375\n      0.066654\n      2.020250\n      17.46\n      4.3128\n      2.653905\n    \n    \n      2020-01-03\n      13.0500\n      4.9750\n      5.1750\n      101.37125\n      58.500\n      2.470189\n      0.098185\n      -2.33625\n      0.066835\n      3.742750\n      17.46\n      11.6748\n      4.854942\n    \n    \n      2020-01-04\n      10.8625\n      6.6875\n      5.5625\n      101.15500\n      78.375\n      2.475354\n      0.086530\n      -0.23625\n      0.066553\n      3.948125\n      17.46\n      1.6452\n      1.871722\n    \n    \n      2020-01-05\n      12.9375\n      9.2125\n      4.5625\n      101.23625\n      79.125\n      2.470455\n      0.097554\n      4.25250\n      0.066739\n      3.418125\n      17.46\n      6.8544\n      3.415474\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-01-27\n      13.8125\n      8.2375\n      1.8875\n      100.83750\n      72.375\n      2.468389\n      0.102551\n      4.77750\n      0.066532\n      2.000375\n      17.46\n      12.2652\n      5.060995\n    \n    \n      2021-01-28\n      14.4000\n      10.2250\n      3.5250\n      101.12750\n      76.750\n      2.467002\n      0.106028\n      -3.07125\n      0.066760\n      2.868250\n      17.46\n      7.1640\n      3.534995\n    \n    \n      2021-01-29\n      12.3500\n      7.9125\n      5.0250\n      101.22125\n      75.250\n      2.471842\n      0.094317\n      -3.01875\n      0.066691\n      3.663250\n      17.46\n      7.2936\n      3.537119\n    \n    \n      2021-01-30\n      12.9625\n      7.6500\n      4.4250\n      101.49500\n      71.375\n      2.470396\n      0.097694\n      5.69625\n      0.066911\n      3.345250\n      17.46\n      9.3276\n      4.152687\n    \n    \n      2021-01-31\n      15.0625\n      8.3125\n      3.7500\n      101.32500\n      66.000\n      2.465437\n      0.110070\n      8.82000\n      0.066933\n      2.987500\n      17.46\n      13.5468\n      5.513874\n    \n  \n\n397 rows × 13 columns\n\n\n\nCalculate the vapor pressure deficit, VPD, add a new column to df_pen.\n\\[\ne_d = e_s\\cdot \\frac{RH}{100}\n\\]\n\\[\ne_s = \\exp\\left(\\frac{16.78\\,T-116.9}{T+237.3}\\right)\n\\]\n\n# vapor pressure deficit = VPD\ndef vp_sat(T):\n    return np.exp((16.78*T - 116.9)/(T + 237.3)) \ndf_pen['es'] = vp_sat(df_pen['T'])\ndf_pen['ed'] = df_pen['es'] * df_pen['RH'] / 100\ndf_pen['VPD'] = df_pen['es'] - df_pen['ed']\ndf_pen\n\n\n\n\n\n  \n    \n      \n      T\n      dew_point\n      u\n      P\n      RH\n      lambda\n      Delta\n      G\n      gamma\n      f_wind\n      Rso_monthly\n      Rs\n      Rn\n      es\n      ed\n      VPD\n    \n    \n      timestamp\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-01\n      12.3625\n      9.0625\n      1.5250\n      101.30875\n      81.500\n      2.471812\n      0.094385\n      -1.62750\n      0.066750\n      1.808250\n      17.46\n      10.0296\n      4.346568\n      1.437148\n      1.171276\n      0.265872\n    \n    \n      2020-01-02\n      11.9750\n      9.8250\n      1.9250\n      101.20125\n      87.000\n      2.472727\n      0.092300\n      1.44375\n      0.066654\n      2.020250\n      17.46\n      4.3128\n      2.653905\n      1.400935\n      1.218813\n      0.182122\n    \n    \n      2020-01-03\n      13.0500\n      4.9750\n      5.1750\n      101.37125\n      58.500\n      2.470189\n      0.098185\n      -2.33625\n      0.066835\n      3.742750\n      17.46\n      11.6748\n      4.854942\n      1.503424\n      0.879503\n      0.623921\n    \n    \n      2020-01-04\n      10.8625\n      6.6875\n      5.5625\n      101.15500\n      78.375\n      2.475354\n      0.086530\n      -0.23625\n      0.066553\n      3.948125\n      17.46\n      1.6452\n      1.871722\n      1.301383\n      1.019959\n      0.281424\n    \n    \n      2020-01-05\n      12.9375\n      9.2125\n      4.5625\n      101.23625\n      79.125\n      2.470455\n      0.097554\n      4.25250\n      0.066739\n      3.418125\n      17.46\n      6.8544\n      3.415474\n      1.492399\n      1.180860\n      0.311538\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2021-01-27\n      13.8125\n      8.2375\n      1.8875\n      100.83750\n      72.375\n      2.468389\n      0.102551\n      4.77750\n      0.066532\n      2.000375\n      17.46\n      12.2652\n      5.060995\n      1.580054\n      1.143564\n      0.436490\n    \n    \n      2021-01-28\n      14.4000\n      10.2250\n      3.5250\n      101.12750\n      76.750\n      2.467002\n      0.106028\n      -3.07125\n      0.066760\n      2.868250\n      17.46\n      7.1640\n      3.534995\n      1.641414\n      1.259785\n      0.381629\n    \n    \n      2021-01-29\n      12.3500\n      7.9125\n      5.0250\n      101.22125\n      75.250\n      2.471842\n      0.094317\n      -3.01875\n      0.066691\n      3.663250\n      17.46\n      7.2936\n      3.537119\n      1.435967\n      1.080565\n      0.355402\n    \n    \n      2021-01-30\n      12.9625\n      7.6500\n      4.4250\n      101.49500\n      71.375\n      2.470396\n      0.097694\n      5.69625\n      0.066911\n      3.345250\n      17.46\n      9.3276\n      4.152687\n      1.494843\n      1.066944\n      0.427899\n    \n    \n      2021-01-31\n      15.0625\n      8.3125\n      3.7500\n      101.32500\n      66.000\n      2.465437\n      0.110070\n      8.82000\n      0.066933\n      2.987500\n      17.46\n      13.5468\n      5.513874\n      1.713106\n      1.130650\n      0.582456\n    \n  \n\n397 rows × 16 columns\n\n\n\nNow that all variables have been defined, daily E_penman can be calculated.\n\\[\nE_{tp} = \\frac{\\Delta}{\\Delta+\\gamma}Q_{ne}+ \\frac{\\gamma}{\\Delta+\\gamma}E_A\n\\]\n\\(Q_n\\) is the available energy flux density:\n\\[\nQ_n = R_n - G,\n\\]\nand \\(E_A\\) is the drying power of the air:\n\\[\nE_A = f_e(u)\\cdot\\text{VPD}\n\\]\nAdd a new column E_penman to df_pen.\n\ndef E_penman(df):\n    T = df['T']\n    Delta = df['Delta']\n    gamma = df['gamma']\n    Rn = df['Rn']\n    G = df['G']\n    EA = 6.43*df['f_wind'] * df['VPD']\n    lambd = df['lambda']\n    return ((Delta / (Delta + gamma))*(Rn - G) + ((gamma / (Delta + gamma))*EA)) / lambd\n\n# daily_data\ndf_pen['E_penman'] = E_penman(df_pen)\n\nfig, ax = plt.subplots(1, figsize=(10,7))\nax.plot(df_pen['E_penman'])\nplt.gcf().autofmt_xdate()\nax.set_ylabel(r\"$ET_{penman}$ (mm d$^{-1}$)\")\n\nText(0, 0.5, '$ET_{penman}$ (mm d$^{-1}$)')\n\n\n\n\n\nMake a plot with the following:\n\nthe Penman (daily) estimate of the potential evapotranspiration.\nthe Thornthwaite (monthly) estimate of the potential ET.\ndaily evaporation pan data.\n\n\nfig, ax = plt.subplots(1, 1, figsize=(10,7))\nax.plot(df_pen['E_penman'], color=\"tab:red\", label=\"Penman\", linewidth=2)\nax.plot(df_th['Ep']/30, color=\"tab:blue\", label=\"Thornthwaite\", linewidth=2)\nax.plot(1*df2['pan evaporation (mm)'], color=\"black\", label=\"pan\", linewidth=2)\n\nax.set(xlabel=\"date\",\n       ylabel=\"evaporation (mm)\")\nax.legend();\n\n\n\n\nPlot the mean temperatures used in the Penman calculation (daily mean) and in the Thornthwaite calculation (monthly mean).\n\nfig, ax = plt.subplots(1, 1, figsize=(10,7))\nax.plot(df_pen['T'], color=\"tab:blue\", label=\"Penman\", linewidth=2)\nax.plot(df_th['T'], color=\"tab:orange\", label=\"Thornthwaite\", linewidth=2)\nax.set(xlabel=\"date\",\n       ylabel=\"temperature (°C)\")\nax.legend();"
  }
]